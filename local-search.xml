<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2023/03/22/JSP/</title>
    <link href="/2023/03/22/JSP/"/>
    <url>/2023/03/22/JSP/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022/11/04/《绝叫》读书随记/</title>
    <link href="/2022/11/04/%E3%80%8A%E7%BB%9D%E5%8F%AB%E3%80%8B%E8%AF%BB%E4%B9%A6%E9%9A%8F%E8%AE%B0/"/>
    <url>/2022/11/04/%E3%80%8A%E7%BB%9D%E5%8F%AB%E3%80%8B%E8%AF%BB%E4%B9%A6%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>这本书还有5%没读的时候，正是结尾，但是也是全书的高潮反转部分，我想要继续一鼓作气看完这本书，但是一想到看完了之后要写读书随记就不是很想写了，这本书很压抑，有点不想读完后再做过多的回忆与深究，不过后面还是没忍住看完了，现在便开始写这本书的读书随记。</p><p>全书有两条叙事角度，一条是“当下”，另外一条是第二人称叙述铃木阳子的人生——四十年的编年史。故事从当下在一家公寓发现铃木阳子的尸体开始讲述，她的尸体与十一只猫一起被发现，由警察绫乃接手案子进行深入调查，调查过程中牵引出了铃木阳子压抑却又奇妙的人生经历，当下的故事都在和第二人称的叙述相互照应，即使只看第二条线也能看懂发生了什么，那也是一个完整的故事。另一条线，第二人称的叙述，让我感觉仿佛就是我自己目睹了铃木阳子的出生，成长，颓败，翻身，再颓败，再翻身以及脱身的种种经历。</p><p>就像书的介绍所说，铃木阳子的人格塑造于她从小的生存环境，她幼时的生活看起来一片平静又美好：一个事业有成的父亲，一个面容姣好又贤惠的家庭主妇妈妈，还有一个聪明的弟弟，加上她，一家四口，住在建在父亲买下的地基之上的自建独栋房子。实际上，父亲确实收入高，但是从不过问家里的事情，她和弟弟跟父亲说过的话屈指可数，母亲并不喜欢她目前的生活，只是在日复一日的过着毫无意义的家庭主妇生活，却还要装做乐在其中的样子，成为一株菟丝子附在她丈夫这棵大树上，弟弟似乎患有阿斯伯格综合征，除了智商上表现出的优越，其他方面都是一个低能儿，但却独享母亲的关爱，阳子没有得到过父母的关爱，但也没得到过多的约束，在小时候家庭给她的影响显现的并不是很明显。</p><p>但是随着阳子步入社会，表面上的她是一个平凡的女性，不过平凡的阳子几乎遇到了女性一生中将会经历的绝望事情的合集，真正的阳子已经死了一回又一回了，现实给了她N个甜饼又一掌给她打趴下：父亲借下高利贷后远走他乡，留下她和母亲独面凶神恶煞的收债者，生活平静被打破，以为遇到了初恋对象和他结婚一起去东京就已经是传统童话的HE，结果老公出轨联合小三让她几乎是净身出户，以为和温柔体贴重视自己的上司之间会有爱情，得到的是职场上骗财骗色的上司无数次PUA，迫不得已走上应召，以为靠着皮肉钱也能让自己外表光鲜的苟活，结果下班路上也能遇到狩猎应召虐待抢钱，以为酒醉后遇到的帅气小哥是自己最终的情感归宿，没想到他是后期自己还要用皮肉钱去供给吃白饭的牛郎家暴男，一天天形成恶意，一步步走向恶魔，最终的阳子还是活下来了，结局的她，自由了，铃木阳子自由了。</p><p>这本书里面写实的呈现了社会的阴暗面：重男轻女，校园霸凌，家暴，泡沫经济，消费主义和援助交际，高利贷，贫困人口，骗保，各行业的混乱私生活等，一系列的第二人称陈述，代入感很强烈。这个第二人称并不是作者的叙述，而是“重生”的阳子对自己说话的口吻，结尾的时候才发现。</p><p>不想写这个读书随记了，再写我美好的周五都会变得不快乐了。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022/10/13/《长安的荔枝》读书随记/</title>
    <link href="/2022/10/13/%E3%80%8A%E9%95%BF%E5%AE%89%E7%9A%84%E8%8D%94%E6%9E%9D%E3%80%8B%E8%AF%BB%E4%B9%A6%E9%9A%8F%E8%AE%B0/"/>
    <url>/2022/10/13/%E3%80%8A%E9%95%BF%E5%AE%89%E7%9A%84%E8%8D%94%E6%9E%9D%E3%80%8B%E8%AF%BB%E4%B9%A6%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="《长安的荔枝》读书随记"><a href="#《长安的荔枝》读书随记" class="headerlink" title="《长安的荔枝》读书随记"></a>《长安的荔枝》读书随记</h1><p>李善德，《长安的荔枝》中的主角，五十有余，还在长安城里安居于一个九品小官，一生过得懦弱，为人和善，不与人结仇，平日间的乐趣似乎只在于和自己的二三好友一起饮酒。上头下来了一个转运荔枝的职位，从岭南把鲜荔枝运到长安，五千里路程，放在现在，能够轻松送到，可是古代，这仿佛天方夜谭。<br>阴差阳错，稀里糊涂，李善德被设计领命运送荔枝，我看到这里的时候，我脑中还在想作者莫不是要在文中给李善德创造一种前所未有的奇思妙想助他完成任务，但却不曾想到，作者强调了李善德的算术功底，通过精密的计算和实打实的实践，李善德做到了让荔枝保鲜11日不坏。<br>做到如此精妙的完成任务，确实说明了李善德的能力不凡，但是人生二三十年蹉跎而过，他却依然还是一个九品小官，只看开头的时候我以为作者要给他开金手指，塑造一个一直默默无闻，还要藏拙的李善德，然后突然被发掘一展自己能力，走向人生巅峰，在朝成为一个有分量的官员；细细品完中间细节，他与杨国史的一番话道出了因果关系：<br>“他的声音不知不觉高了起来：这些农户俱是三等贫户，每年常例租庸调已苦不堪言。下官去找到的那个村落，家无余米，人无蔽衫，连扇像样的屋门板都没有。如今平白每户多了九贯五百钱的负累。让驿长如何不逃？让村落如何不散？””<br>“李善德不避不让，目光炯炯：“为相者，该当协理阴阳，权衡万事。荔枝与国家，不知相公心中到底是如何权衡，圣人心中，又觉得孰轻孰重？””<br>原是因为李善德这个人太过正直，运送荔枝途中，他目睹了百姓疾苦，而朝廷却只为了几颗荔枝就消耗了几千贯钱，还要反从百姓手中薅钱，美名其曰赚的，而多个驿百姓流散；二十多年的树说砍就砍，运送途中的人力物力消耗数不胜数，这些事情都经由他手，为人臣子，不得不做，将荔枝送进长安，原应嘉奖，而他宁愿不请功，得罪右相也要说出自己一直所信守的原则。这过程中间他不是没有犹豫挣扎过，冒犯右相，不是一件小事，他成功运送荔枝的这件事的功劳可能也抵不了右相的震怒，毕竟杨国史一人之下，万人之上，捏死他轻而易举，他的背后还有妻子女儿，牵一发而动全家，不过他有幸遇到了一位知音妻子，她愿意支持他做的一切决定，在和妻子商量后，他还是决定遵从本身。很真实，有能力又怎样，若是处理不来复杂的朝廷中的人际关系，或者说挡了别人的路，被打压才是正常会发生的事情，完全不理想化，反而很现实的一个故事。<br>《长安的荔枝》塑造了很多个性鲜明的人物。李善德的两个好友：杜子美、韩承，杜甫还是我们认知中那个有气节的大诗人，当时还未像后世的他这样出名，但仍是一个忧国忧民的骨气诗人，韩承是一个偏聪明圆滑一些的好友，把官场中的种种看得十分清楚，总能教李善德一些官场处事之道。运送荔枝中遇到的胡商苏谅，真正的将李善德当成了朋友，他欣赏李善德的才能和人品，同情他的遭遇；保护李善德免遭暗杀，逃离虎口的奴隶，遇到了李善德的时候才第一次被当成了一个有人格的人，他感谢李善德知遇之恩，以死相报；荔枝少女阿僮属于“城外人”，不被“城里人”所尊敬也不屑于与他们打交道，却和李善德成为了忘年交……很喜欢阿僮，十分真诚的一个女孩子，性格鲜明，不受一点世俗染指，还有一只花狸猫，每日单纯快乐的兴种荔枝，向往羡慕她的生活。<br>马伯庸在文后说明中说“你会发现，上头一道命令，下面的人得忙活上半天，有大量琐碎的事务要处理。”，“一将功成万骨枯，其实一事功成，也是万头皆秃。”，是这样的道理，我觉得他总结的很对，这本书的读后感就只写到这里吧，不过将我换到李善德的位置，我肯定做不到他如此的通透，十分敬畏这一角色。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022/10/08/python网络编程之TCP/</title>
    <link href="/2022/10/08/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BTCP/"/>
    <url>/2022/10/08/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BTCP/</url>
    
    <content type="html"><![CDATA[<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><h3 id="TCP客户端程序开发流程"><a href="#TCP客户端程序开发流程" class="headerlink" title="TCP客户端程序开发流程"></a>TCP客户端程序开发流程</h3><p>1.创建客户端套接字对象</p><p>2.和服务端套接字创建链接</p><p>3.发送数据</p><p>4.接收数据</p><p>5.关闭客户端套接字</p><h4 id="socket类的介绍"><a href="#socket类的介绍" class="headerlink" title="socket类的介绍"></a>socket类的介绍</h4><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-comment">#导入socket模块</span><br>socket.socket(AddressFamily,<span class="hljs-type">Type</span>)<br><span class="hljs-comment">#创建socket对象使用socket类</span><br><span class="hljs-comment">#AddressFamily是指IP地址类型，IPv4（AF_INET）,IPv6</span><br><span class="hljs-comment">#Type,传输协议类型,TCP(SOCK_STREAM)</span><br></code></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    tcp_client_socket=socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>    tcp_client_socket.connect((<span class="hljs-string">&quot;XX.XX.XX.XX&quot;</span>,<span class="hljs-number">8080</span>))<span class="hljs-comment">#元组形式来表示IP地址和端口号</span><br>    tcp_client_socket.send(<span class="hljs-string">&quot;hello world&quot;</span>.encoding(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    recv_data=tcp_client_sockey.recv(<span class="hljs-number">1024</span>)<span class="hljs-comment">#可以接受的数据大小</span><br>    <span class="hljs-built_in">print</span>(recv_data.decode())<br>    tcp_client_socket.close()<br></code></pre></td></tr></table></figure><h3 id="TCP服务端程序开发流程"><a href="#TCP服务端程序开发流程" class="headerlink" title="TCP服务端程序开发流程"></a>TCP服务端程序开发流程</h3><p>1.创建服务端端套接字对象</p><p>2.绑定IP地址和端口号（bind)</p><p>3.设置监听(listen)</p><p>4.等待接收客户端的连接请求(accept)</p><p>5.接收数据(recv)</p><p>6.发送数据(send)</p><p>7.关闭套接字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    tcp_server_socket=socket.socket(socket.AF_INET,socket.SOCK_STREAM)<br>    tcp_server_socket.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEPORT,<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 设置端口复用</span><br>    tcp_server_socket.bind((<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">8888</span>))<br>    <span class="hljs-comment"># &quot;&quot;表示本机IP</span><br>    tcp_server_socket.listen(<span class="hljs-number">128</span>)<br>    <span class="hljs-comment"># 128表示服务器等待排队连接的最大数量</span><br>    connect_socket,ip_port=tcp_server_socket.accept()<br>    <span class="hljs-comment"># tcp_server_socket只能用于监听，accept创建了一个socket用来recv</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;客户端地址：&quot;</span>,ip_port)<br>    recv_data=connect_socket.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;客户端发送的数据为：&quot;</span>,recv_data.decode())<br>    connect_socket.send(<span class="hljs-string">&quot;你的数据我收到了&quot;</span>.encode())<br>    connect_socket.close()<br>    tcp_server_socket.close()<br></code></pre></td></tr></table></figure><h3 id="多任务TCP服务端程序开发"><a href="#多任务TCP服务端程序开发" class="headerlink" title="多任务TCP服务端程序开发"></a>多任务TCP服务端程序开发</h3><p>1.编写一个TCP服务端程序，循环等待接受客户端连接请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, <span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 设置端口复用</span><br>    tcp_server_socket.bind((<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">8888</span>))<br>    <span class="hljs-comment"># &quot;&quot;表示本机IP</span><br>    tcp_server_socket.listen(<span class="hljs-number">128</span>)<br>    <span class="hljs-comment"># 128表示服务器等待排队连接的最大数量</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        connect_socket, ip_port = tcp_server_socket.accept()<br>        <span class="hljs-comment"># tcp_server_socket只能用于监听，accept创建了一个socket用来recv</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;客户端地址：&quot;</span>, ip_port)<br>        recv_data = connect_socket.recv(<span class="hljs-number">1024</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;客户端发送的数据为：&quot;</span>, recv_data.decode())<br>        connect_socket.send(<span class="hljs-string">&quot;你的数据我收到了&quot;</span>.encode())<br>        connect_socket.close()<br><br></code></pre></td></tr></table></figure><p>2.使用多线程，当客户端与服务端建立连接成功，创建子线程，使用子线程专门处理客户端的请求，防止主线阻塞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> threading<br><br><br><span class="hljs-comment"># 处理客户端函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_client</span>():<br>    recv_data = connect_socket.recv(<span class="hljs-number">1024</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;客户端发送的数据为：&quot;</span>, recv_data.decode())<br>    connect_socket.send(<span class="hljs-string">&quot;你的数据我收到了&quot;</span>.encode())<br>    connect_socket.close()<br>    <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    tcp_server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    tcp_server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, <span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 设置端口复用</span><br>    tcp_server_socket.bind((<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">8888</span>))<br>    <span class="hljs-comment"># &quot;&quot;表示本机IP</span><br>    tcp_server_socket.listen(<span class="hljs-number">128</span>)<br>    <span class="hljs-comment"># 128表示服务器等待排队连接的最大数量</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        connect_socket, ip_port = tcp_server_socket.accept()<br>        <span class="hljs-comment"># tcp_server_socket只能用于监听，accept创建了一个socket用来recv</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;客户端地址：&quot;</span>, ip_port)<br>        sub_thread=threading.Thread(target=handle_client)<br>        <span class="hljs-comment"># 使用多线程去接收多个用户的请求</span><br>        sub_thread.start()<br><br>    tcp_server_socket.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>TCP网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022/10/08/python多任务及进程/</title>
    <link href="/2022/10/08/python%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%8F%8A%E8%BF%9B%E7%A8%8B/"/>
    <url>/2022/10/08/python%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%8F%8A%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h3><p>两种多任务形式：</p><ul><li>并发：在一段时间<strong>交替</strong>去执行多个任务；并发数量大于CPU的核心数</li><li>并行：在一段时间内<strong>真正的一起执行</strong>多任务；任务数量小于等于CPU核心数</li></ul><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>在python中实现多任务采用进程，进程是资源分配的最小单位，它是操作系统进行资源分配和调度运行的基本单位。</p><h5 id="多进程的作用："><a href="#多进程的作用：" class="headerlink" title="多进程的作用："></a>多进程的作用：</h5><ul><li>程序运行会默认创建一个进程，这个默认创建的进程称之为主进程</li><li>程序运行后又创建了一个进程，这个进程称之为子进程</li></ul><h3 id="多进程完成多任务"><a href="#多进程完成多任务" class="headerlink" title="多进程完成多任务"></a>多进程完成多任务</h3><h5 id="进程创建步骤："><a href="#进程创建步骤：" class="headerlink" title="进程创建步骤："></a>进程创建步骤：</h5><p>1.导入进程包</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> multiprocessing<br></code></pre></td></tr></table></figure><p>2.通过进程类创建进程对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">进程对象=multiprocessing.Process(参数)<br><span class="hljs-comment"># 参数：</span><br><span class="hljs-comment"># target执行发目标任务名，这里之的是函数名（方法名）</span><br><span class="hljs-comment"># name,group</span><br></code></pre></td></tr></table></figure><p>3.启动进程执行任务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">进程对象.start()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> multiprocessing<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">coding</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;coding...&quot;</span>)<br>        time.sleep(<span class="hljs-number">0.8</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">coding1</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;coding1...&quot;</span>)<br>        time.sleep(<span class="hljs-number">0.8</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    coding_process = multiprocessing.Process(target=coding)<br>    coding1_process = multiprocessing.Process(target=coding1)<br>    <span class="hljs-comment"># target所指向的函数名不加括号</span><br>    coding_process.start()<br>    coding1_process.start()<br><br></code></pre></td></tr></table></figure><h5 id="进程执行带有参数的任务："><a href="#进程执行带有参数的任务：" class="headerlink" title="进程执行带有参数的任务："></a>进程执行带有参数的任务：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">coding_process=multiprocessing.Process(target=coding,args=(<span class="hljs-number">3</span>,))<br><span class="hljs-comment"># 以元组的形式给函数传参</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">coding_process=multiprocessing.Process(target=coding,kwargs=&#123;<span class="hljs-string">&quot;num&quot;</span>:<span class="hljs-number">3</span>&#125;)<br><span class="hljs-comment"># 以字典的形式给函数传参</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> multiprocessing<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">coding</span>(<span class="hljs-params">num,name</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        <span class="hljs-built_in">print</span>(name)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;coding...&quot;</span>)<br>        time.sleep(<span class="hljs-number">0.8</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">coding1</span>(<span class="hljs-params">count</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(count):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;coding1...&quot;</span>)<br>        time.sleep(<span class="hljs-number">0.8</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    coding_process = multiprocessing.Process(target=coding, args=(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;nice&quot;</span>))<br>    <span class="hljs-comment"># 多个变量传参</span><br>    coding1_process = multiprocessing.Process(target=coding1,kwargs=&#123;<span class="hljs-string">&quot;count&quot;</span>:<span class="hljs-number">2</span>&#125;)<br>    coding_process.start()<br>    coding1_process.start()<br><br></code></pre></td></tr></table></figure><h5 id="获取进程编号"><a href="#获取进程编号" class="headerlink" title="获取进程编号:"></a>获取进程编号:</h5><p>1.获取当前进程号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-built_in">print</span>(os.getpid)<br></code></pre></td></tr></table></figure><p>2.获取父进程编号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-built_in">print</span>(os.getppid)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> multiprocessing<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">coding</span>(<span class="hljs-params">num,name</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        <span class="hljs-built_in">print</span>(name)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前子进程号为：&quot;</span>,os.getpid())<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前父进程号为：&quot;</span>,os.getppid())<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;coding...&quot;</span>)<br>        time.sleep(<span class="hljs-number">0.8</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">coding1</span>(<span class="hljs-params">count</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(count):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;coding1...&quot;</span>)<br>        time.sleep(<span class="hljs-number">0.8</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;主进程的进程号：&quot;</span>,os.getpid())<br>    coding_process = multiprocessing.Process(target=coding, args=(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;nice&quot;</span>))<br>    coding1_process = multiprocessing.Process(target=coding1,kwargs=&#123;<span class="hljs-string">&quot;count&quot;</span>:<span class="hljs-number">2</span>&#125;)<br>    coding_process.start()<br>    coding1_process.start()<br></code></pre></td></tr></table></figure><p><img src="/2022/10/08/python%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%8F%8A%E8%BF%9B%E7%A8%8B/2.jpg"></p><h5 id="进程间不共享全局变量"><a href="#进程间不共享全局变量" class="headerlink" title="进程间不共享全局变量"></a>进程间不共享全局变量</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> multiprocessing<br><span class="hljs-keyword">import</span> time<br><br>my_list = []<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_list</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        my_list.append(i)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;add:&quot;</span>,i)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;write_data:&quot;</span>,my_list)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_list</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;read_data:&quot;</span>,my_list)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    write_process=multiprocessing.Process(target=write_list)<br>    read_process=multiprocessing.Process(target=read_list)<br>    write_process.start()<br>    time.sleep(<span class="hljs-number">1</span>)<br>    read_process.start()<br></code></pre></td></tr></table></figure><p>上面的三个进程（一个主进程，两个子进程）分别操作的都是自己进程里面的全局变量my_list，不会对其他进程里的全局变量产生影响，所以进程之间不共享全局变量，只不过继承之间的全局变量名相同而已，但是操作的不是同一个基础南横里面的全局变量。<strong>创建子进程会对主进程资源进行拷贝</strong></p><p><img src="/2022/10/08/python%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%8F%8A%E8%BF%9B%E7%A8%8B/python%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%8F%8A%E8%BF%9B%E7%A8%8B%5C1.jpg"></p><h5 id="子进程和主进程的结束顺序："><a href="#子进程和主进程的结束顺序：" class="headerlink" title="子进程和主进程的结束顺序："></a>子进程和主进程的结束顺序：</h5><ul><li>主进程会等待所有的子进程执行结束再结束</li><li>设置守护主进程，主进程退出后子进程直接销毁，不再执行子进程中的代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">子进程名.daemon=<span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><ul><li>主动销毁子进程</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pyhon">子进程名.terminate()<br></code></pre></td></tr></table></figure><p><strong>上面两种结果相同</strong></p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022/09/09/正则表达式/</title>
    <link href="/2022/09/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2022/09/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>字符匹配</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022/09/01/stringstream库进行数据类型转换/</title>
    <link href="/2022/09/01/stringstream%E5%BA%93%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>/2022/09/01/stringstream%E5%BA%93%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="基于sstream库的数据类型转换"><a href="#基于sstream库的数据类型转换" class="headerlink" title="基于sstream库的数据类型转换"></a>基于sstream库的数据类型转换</h3><p>定义了三个类：istringsteam,ostringsteam,stringstream分别用来进行流的输入输出和输入输出操作</p><p>基础用法：</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n;<br>string s=<span class="hljs-string">&#x27;12345&#x27;</span>;<br>stringstream ss;<br>ss&lt;&lt;s;<br>ss&gt;&gt;n;<span class="hljs-comment">//此时n=12345</span><br></code></pre></td></tr></table></figure><h3 id="使用stringstream提升效率"><a href="#使用stringstream提升效率" class="headerlink" title="使用stringstream提升效率"></a>使用stringstream提升效率</h3><p>正常要给一个文件中写入内容</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ofstream <span class="hljs-title">ofile</span><span class="hljs-params">(<span class="hljs-string">&quot;eg.text&quot;</span>)</span></span>;<br><span class="hljs-comment">//每次符合条件时都会一行一行的往里面写入内容</span><br>ofile&lt;&lt;<span class="hljs-string">&quot;xxxxx&quot;</span>&lt;&lt;endl;<br></code></pre></td></tr></table></figure><p>使用stringstream往文件中写入内容，可以先把要输入的内容存储在对象的缓存区</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">ofstream <span class="hljs-title">ofile</span><span class="hljs-params">(<span class="hljs-string">&quot;eg.text&quot;</span>)</span></span>;<br>stringstream oss;<br>oss&lt;&lt;<span class="hljs-string">&quot;xxxx&quot;</span>&lt;&lt;endl;<span class="hljs-comment">//每次满足条件时先写入缓存</span><br>ofile&lt;&lt;oss.<span class="hljs-built_in">str</span>();<span class="hljs-comment">//最后一次性写入</span><br></code></pre></td></tr></table></figure><h3 id="蓝桥杯题目"><a href="#蓝桥杯题目" class="headerlink" title="蓝桥杯题目"></a>蓝桥杯题目</h3><p><img src="/2022/09/01/stringstream%E5%BA%93%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/1.jpg"></p><p>分析：例如里面的意思是：从一开始拼数字——1，2，3，4，5，6，7，8，9，10，11在11这里会用到第四个1，故按顺序拼只能拼到10，每次数字最先用完的是1，所以只需要统计1的使用频率，既可以算出可以拼到多少</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//将整型转化为字符串</span><br><span class="hljs-function">string <span class="hljs-title">int_to_str</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>string output;<br>stringstream oss;<br>oss &lt;&lt; i;<br>oss &gt;&gt; output;<br><span class="hljs-keyword">return</span> output;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> count1 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>string s = <span class="hljs-built_in">int_to_str</span>(i);<br>count1 += <span class="hljs-built_in">count</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>(), <span class="hljs-string">&#x27;1&#x27;</span>);<span class="hljs-comment">//调用algorithm头文件里的算法，计算1出现的次数</span><br><span class="hljs-keyword">if</span> (count1 &gt;= <span class="hljs-number">2021</span>) &#123; <span class="hljs-keyword">break</span>; &#125;<br><span class="hljs-keyword">else</span> &#123; i += <span class="hljs-number">1</span>; &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (count1 &gt; <span class="hljs-number">2021</span>) &#123; i -= <span class="hljs-number">1</span>; &#125;<span class="hljs-comment">//判断此时最大的i能不能被组成</span><br>cout &lt;&lt; i &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2022/09/01/stringstream%E5%BA%93%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/2.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>自己撸的代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>数据类型转换</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022/07/15/Java基础编程训练/</title>
    <link href="/2022/07/15/Java%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E8%AE%AD%E7%BB%83/"/>
    <url>/2022/07/15/Java%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E8%AE%AD%E7%BB%83/</url>
    
    <content type="html"><![CDATA[<h3 id><a href="#" class="headerlink" title></a></h3><h3 id="案例一：买飞机票"><a href="#案例一：买飞机票" class="headerlink" title="案例一：买飞机票"></a>案例一：买飞机票</h3><p>需求：</p><ul><li>机票价格按照淡季旺季头等舱和经济舱收费，输入机票原价、月份和头等舱或经济舱</li><li>机票优惠方案计算如下：旺季（5-10）头等舱9折，经济舱8.5折，淡季（11-来年4）头等舱7折，经济舱6，5折。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> eg1;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">eg1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入机票原价：&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>        System.out.println(<span class="hljs-string">&quot;请输入月份：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        System.out.println(<span class="hljs-string">&quot;请输入舱位类型：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> sc.next();<br>        System.out.println(<span class="hljs-string">&quot;机票的价格是&quot;</span> + judge(price, month, type));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(<span class="hljs-type">double</span> price, <span class="hljs-type">int</span> month, String type)</span> &#123;<br>        <span class="hljs-keyword">if</span> (month &gt;= <span class="hljs-number">5</span> &amp;&amp; month &lt;= <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-keyword">switch</span> (type) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;头等舱&quot;</span>:<br>                    price *= <span class="hljs-number">0.9</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;经济舱&quot;</span>:<br>                    price *= <span class="hljs-number">0.85</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;您的输入有误！&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">switch</span> (type) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;头等舱&quot;</span>:<br>                    price *= <span class="hljs-number">0.7</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;经济舱&quot;</span>:<br>                    price *= <span class="hljs-number">0.65</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">&quot;您的输入有误！&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2022/07/15/Java%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E8%AE%AD%E7%BB%83/1.jpg"></p><h3 id="案例二：找素数"><a href="#案例二：找素数" class="headerlink" title="案例二：找素数"></a>案例二：找素数</h3><p>需求：</p><ul><li>找到101-200之间的素数，并打印出来</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> eg2;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">eg2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">101</span>;i&lt;<span class="hljs-number">201</span>;i++)&#123;<br>            <span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>;<span class="hljs-comment">//信号位：标记</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>;j&lt;i/<span class="hljs-number">2</span>;j++)&#123;<br>                <span class="hljs-keyword">if</span>(i%j==<span class="hljs-number">0</span>)&#123;<br>                    flag=<span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//根据信号位判断是否输出这个数据</span><br>            <span class="hljs-keyword">if</span>(flag)&#123;<br>                System.out.print(i+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2022/07/15/Java%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E8%AE%AD%E7%BB%83/2.jpg"></p><h3 id="案例三：开发验证码"><a href="#案例三：开发验证码" class="headerlink" title="案例三：开发验证码"></a>案例三：开发验证码</h3><p>需求：</p><ul><li>定义方法实现随机产生一个五位的验证码，每位可能是数字，大写字母，小写字母</li></ul><p>分析：</p><ul><li>定义一个方法，生成验证码返回：方法参数是位数，返回值类型是String</li><li>在方法内部使用for循环生成指定位数的随机字符，并连接起来</li><li>把连接好的随机字符作为一组验证码进行返回</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> eg3;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">eg3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        String code=createCode(<span class="hljs-number">5</span>);<br>        System.out.println(<span class="hljs-string">&quot;随机验证码：&quot;</span>+code);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createCode</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        Random r=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        String code=<span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//空字符</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-comment">//生成随机字符：大写，小写，数字（0 1 2）</span><br>            <span class="hljs-type">int</span> type=r.nextInt(<span class="hljs-number">3</span>);<br>            <span class="hljs-keyword">switch</span> (type)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-comment">//大写字母（A-Z）（65-65+25）</span><br>                    <span class="hljs-type">char</span> ch=(<span class="hljs-type">char</span>)(r.nextInt(<span class="hljs-number">26</span>)+<span class="hljs-number">65</span>);<br>                    code+=ch;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-comment">//小写字母（a-z）（97-97+25）</span><br>                    <span class="hljs-type">char</span> ch1=(<span class="hljs-type">char</span>)(r.nextInt(<span class="hljs-number">26</span>)+<span class="hljs-number">97</span>);<br>                    code+=ch1;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    <span class="hljs-comment">//数字</span><br>                    code+=r.nextInt(<span class="hljs-number">10</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2022/07/15/Java%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E8%AE%AD%E7%BB%83/3.jpg"></p><p><img src="/2022/07/15/Java%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E8%AE%AD%E7%BB%83/4.jpg"></p><h3 id="案例四：数组元素的复制"><a href="#案例四：数组元素的复制" class="headerlink" title="案例四：数组元素的复制"></a>案例四：数组元素的复制</h3><p>需求：</p><ul><li>把一个数组的元素复制到另外一个新的数组中去</li></ul><p>分析：</p><ul><li>需要动态初始化一个数组，长度与原数组一样</li><li>遍历数组的每一个元素，依次赋值给新数组</li><li>输出两个数组的内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> eg4;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">eg4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span>[] arr1=&#123;<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>&#125;;<br>        <span class="hljs-comment">//int[] arr2=arr1并没有完成数组的复制</span><br>        <span class="hljs-type">int</span>[] arr2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr1.length];<br>        copy(arr1,arr2);<br>        printout(arr2);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copy</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr1,<span class="hljs-type">int</span>[] arr2)</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr1.length;i++)&#123;<br>            arr2[i]=arr1[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printout</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;&#123;&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            System.out.print(i==arr.length-<span class="hljs-number">1</span>?arr[i]:arr[i]+<span class="hljs-string">&quot;, &quot;</span>);<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;&#125;&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2022/07/15/Java%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E8%AE%AD%E7%BB%83/5.jpg"></p><h3 id="案例五：评委打分"><a href="#案例五：评委打分" class="headerlink" title="案例五：评委打分"></a>案例五：评委打分</h3><p>需求：</p><ul><li>六名评委打分，分数的范围【0-100】之间的整数，选手最后的得分为：去掉最高分和最低分后的四个评委的平均分，计算出选手的得分</li></ul><p>分析：</p><ul><li>把六位评委的分录入到数组中去</li><li>累加分数后减去最大值和最小值</li><li>累加求和计算平均分</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> eg5;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">eg5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//6位评委分数的录入</span><br>        <span class="hljs-type">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">6</span>];<br>        input(arr);<br>        System.out.print(<span class="hljs-string">&quot;平均分为：&quot;</span>+average(arr));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">input</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        Scanner sc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            System.out.print(<span class="hljs-string">&quot;第&quot;</span>+(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;位评委的分数：&quot;</span>);<br>            arr[i]=sc.nextInt();<br>            System.out.println();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">average</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            sum +=arr[i];<br>        &#125;<br>        <span class="hljs-type">int</span> max=arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> min=arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i]&gt;max)&#123;<br>                max=arr[i];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(arr[i]&lt;min)&#123;<br>                min=arr[i];<br>            &#125;<br>        &#125;<br>        sum-=max;<br>        sum-=min;<br>        <span class="hljs-type">double</span> average=sum/<span class="hljs-number">4.0</span>;<br>        <span class="hljs-keyword">return</span> average;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2022/07/15/Java%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E8%AE%AD%E7%BB%83/6.jpg"></p><h3 id="案例六：模拟双色球系统"><a href="#案例六：模拟双色球系统" class="headerlink" title="案例六：模拟双色球系统"></a>案例六：模拟双色球系统</h3><p>需求：</p><ul><li><p>业务分析、随机生成一组中奖号码</p></li><li><p>用户输入一组双色球号码</p></li><li><p>判断中奖情况</p></li></ul><p>分析：</p><ul><li>中间号码由6个红球和一个蓝球组成（要求：6个红球要求不能重复）</li><li>可以方法用于返回一组中奖号码（7个数据），返回的形式是一个整型数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> eg6;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">eg6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//生成幸运数字</span><br>        <span class="hljs-type">int</span>[] luck=createLuckynumber();<br>        <span class="hljs-comment">//用户输入一串数字</span><br>        <span class="hljs-type">int</span>[] user= userInput();<br>        System.out.println(<span class="hljs-string">&quot;您投注的号码是：&quot;</span>);<br>        printArry(user);<br>        System.out.println(<span class="hljs-string">&quot;中奖号码是：&quot;</span>);<br>        printArry(luck);<br>        <span class="hljs-comment">//判断中奖情况</span><br>        judge(user,luck);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] createLuckynumber()&#123;<br>        <span class="hljs-comment">//动态化生成7个位的数组</span><br>        <span class="hljs-type">int</span>[] numbers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">7</span>];<span class="hljs-comment">//[X,X,X,X,X,X,Y]</span><br>        <span class="hljs-comment">//遍历数组，为对应的每一个位置生成一个对应的号码</span><br>        Random r=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numbers.length-<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<span class="hljs-comment">//利用死循环和标记位</span><br>                <span class="hljs-type">boolean</span> flag=<span class="hljs-literal">true</span>;<br>                <span class="hljs-type">int</span> data=r.nextInt(<span class="hljs-number">33</span>)+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;i;j++)&#123;<br>                    <span class="hljs-keyword">if</span>(numbers[j]==data)&#123;<br>                        flag=<span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(flag)&#123;<br>                    numbers[i]=data;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//蓝球号</span><br>        numbers[numbers.length-<span class="hljs-number">1</span>]=r.nextInt(<span class="hljs-number">16</span>)+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> numbers;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] userInput()&#123;<br>        <span class="hljs-type">int</span>[] numbers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">7</span>];<br>        Scanner sc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numbers.length-<span class="hljs-number">1</span>;i++)&#123;<br>            System.out.println(<span class="hljs-string">&quot;请您输入第&quot;</span>+(i+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;个球号码：&quot;</span>);<br>            <span class="hljs-type">int</span> data=sc.nextInt();<br>            numbers[i]=data;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;请您输入蓝球号码&quot;</span>);<br>        <span class="hljs-type">int</span> data=sc.nextInt();<br>        numbers[numbers.length-<span class="hljs-number">1</span>]=data;<br>        <span class="hljs-keyword">return</span> numbers;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArry</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            System.out.print(arr[i]+<span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] one,<span class="hljs-type">int</span>[] two)</span>&#123;<br>        <span class="hljs-type">int</span> RedHit=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> BlueHit=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;one.length-<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;one.length-<span class="hljs-number">1</span>;j++)&#123;<br>                <span class="hljs-keyword">if</span>(one[j]==two[j])&#123;<br>                    RedHit++;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        BlueHit=one[<span class="hljs-number">6</span>]==two[<span class="hljs-number">6</span>]?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>;<br>        System.out.println(<span class="hljs-string">&quot;您命中了&quot;</span>+RedHit+<span class="hljs-string">&quot;个红球&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;您命中了&quot;</span>+BlueHit+<span class="hljs-string">&quot;个蓝球&quot;</span>);<br>        <span class="hljs-keyword">if</span>(BlueHit==<span class="hljs-number">1</span>&amp;&amp;RedHit&lt;<span class="hljs-number">3</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;恭喜您，中了五元&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((BlueHit==<span class="hljs-number">0</span>&amp;&amp;RedHit==<span class="hljs-number">4</span>)||(BlueHit==<span class="hljs-number">1</span>&amp;&amp;RedHit==<span class="hljs-number">3</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;恭喜您，中了十元&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(BlueHit==<span class="hljs-number">1</span>&amp;&amp;RedHit==<span class="hljs-number">4</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;恭喜您，中了200元&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((BlueHit==<span class="hljs-number">0</span>&amp;&amp;RedHit==<span class="hljs-number">5</span>)||(BlueHit==<span class="hljs-number">1</span>&amp;&amp;RedHit==<span class="hljs-number">5</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;恭喜您，中了十3000元&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(BlueHit==<span class="hljs-number">0</span>&amp;&amp;RedHit==<span class="hljs-number">6</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;恭喜您，中了500万元&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(BlueHit==<span class="hljs-number">1</span>&amp;&amp;RedHit==<span class="hljs-number">6</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;恭喜您，中了1000万元&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;感谢您为福利事业做出的突出贡献！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2022/07/15/Java%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E8%AE%AD%E7%BB%83/7.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>自己撸的代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022/07/13/IJ控制台中文乱码/</title>
    <link href="/2022/07/13/IJ%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <url>/2022/07/13/IJ%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> eg1;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">egs1</span> &#123;<br>    <span class="hljs-comment">//需求，一个三位数，将其分别拆分为个十百分别输出</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Scanner sc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//一个扫描对象</span><br>        <span class="hljs-type">int</span> data=sc.nextInt();<span class="hljs-comment">//等待用户输入数据</span><br>        <span class="hljs-type">int</span> ge=data%<span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> shi=data/<span class="hljs-number">10</span>%<span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> bai=data/<span class="hljs-number">100</span>%<span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;个位是：&quot;</span>+ge);<br>        System.out.println(<span class="hljs-string">&quot;百位是：&quot;</span>+shi);<br>        System.out.println(<span class="hljs-string">&quot;千位是：&quot;</span>+bai);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出后出现乱码：</p><p><img src="/2022/07/13/IJ%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/1.jpg"></p><p>将默认file encoding的三个编码设置改为utf-8后依然是乱码</p><p><img src="/2022/07/13/IJ%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/2.jpg"></p><p>后续又将编码方式改为解决中文编码的GBK编码方式：</p><p><img src="/2022/07/13/IJ%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/3.jpg"></p><p>解决乱码问题：</p><p><img src="/2022/07/13/IJ%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/4.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>经验总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022/07/11/Java基础/</title>
    <link href="/2022/07/11/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/07/11/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id><a href="#" class="headerlink" title></a></h3><h3 id="Java语言概述"><a href="#Java语言概述" class="headerlink" title="Java语言概述"></a>Java语言概述</h3><p>是一门计算机高级编程语言，早期称为oak(橡树)，后期改名为java</p><p>Java之父 詹姆斯·高斯林</p><p>Java具有可移植性，安全可靠，性能较好，开发社区最完善，功能丰富</p><p>可以应用于桌面应用开发(各种税务管理软件，IDEA)，服务器系统(应用后台)，企业级应用开发(微服务，大型互联网应用)，大数据开发(hadoop)，移动应用开发(Android，医疗设备)，游戏开发(MC)</p><p><img src="/2022/07/11/Java%E5%9F%BA%E7%A1%80/1.jpg"></p><h5 id="java技术体系"><a href="#java技术体系" class="headerlink" title="java技术体系"></a>java技术体系</h5><p>SE 标准版 standard</p><p>EE 企业版 enterprise</p><p>ME 小型版 micro</p><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><p>编译代码：javac 文件名.java</p><p>运行： java 类名</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">helloworld</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="基本要求："><a href="#基本要求：" class="headerlink" title="基本要求："></a>基本要求：</h5><p>文件名称的后缀必须是java结尾</p><p>文件名称必须与代码类名称一致</p><p>必须使用英文模式下的符号</p><h3 id="IDEA开发工具"><a href="#IDEA开发工具" class="headerlink" title="IDEA开发工具"></a>IDEA开发工具</h3><h5 id="IDEA项目结构介绍"><a href="#IDEA项目结构介绍" class="headerlink" title="IDEA项目结构介绍"></a>IDEA项目结构介绍</h5><p>projects(项目、工程)</p><p>module(模块)</p><p>package(包)</p><p>class(类)</p><h6 id="以上结构一个包一个，可以采用New新建"><a href="#以上结构一个包一个，可以采用New新建" class="headerlink" title="以上结构一个包一个，可以采用New新建"></a>以上结构一个包一个，可以采用New新建</h6><p><img src="/2022/07/11/Java%E5%9F%BA%E7%A1%80/2.jpg"></p><h5 id="字体、快捷键以及其他操作"><a href="#字体、快捷键以及其他操作" class="headerlink" title="字体、快捷键以及其他操作"></a>字体、快捷键以及其他操作</h5><p>file-settings-自己琢磨</p><p>快捷键：</p><p>CTRL+D：复制当前行代码到下一行</p><p>CTRL+Y：删除所在行</p><p>CTRL+&#x2F;：注释（单行）</p><p>CTRL+shift+&#x2F;：注释</p><h3 id="基础语法：注释"><a href="#基础语法：注释" class="headerlink" title="基础语法：注释"></a>基础语法：注释</h3><p>单行注释：&#x2F;&#x2F;</p><p>多行注释：&#x2F;* *&#x2F;</p><p>文档注释：&#x2F;** *&#x2F;</p><p>注释不影响程序的执行，编译后不存在注释内容</p><h3 id="基础语法：字面量"><a href="#基础语法：字面量" class="headerlink" title="基础语法：字面量"></a>基础语法：字面量</h3><p>整数：2</p><p>小数：12.2</p><p>字符：’a’</p><p>字符串：”hello world’”</p><p>布尔值：true,faulse</p><p>空值：null</p><h3 id="基础语法：变量"><a href="#基础语法：变量" class="headerlink" title="基础语法：变量"></a>基础语法：变量</h3><h5 id="变量定义格式："><a href="#变量定义格式：" class="headerlink" title="变量定义格式："></a>变量定义格式：</h5><p>数据类型   变量名称&#x3D;初始值</p><p>操作和C++相似</p><h5 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h5><p>变量要先声明再使用</p><p>声明后不能再储存其他类型</p><p>变量的有效范围是从定义开始到“}”截止，且在同一个范围内不能定义两个同名的变量</p><p>定义变量的时候可以没有初始值，但是使用的时候必须给初始值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> age;<br>System.out.println(age)<span class="hljs-comment">//是错误的</span><br></code></pre></td></tr></table></figure><p>可以用{}表示独立的代码块</p><h3 id="基础语法：变量原理，ASCII，二进制"><a href="#基础语法：变量原理，ASCII，二进制" class="headerlink" title="基础语法：变量原理，ASCII，二进制"></a>基础语法：变量原理，ASCII，二进制</h3><h5 id="二进制："><a href="#二进制：" class="headerlink" title="二进制："></a>二进制：</h5><p>按字节存储数据，即八位二进制为一个字节，称为一位</p><h5 id="ASCII："><a href="#ASCII：" class="headerlink" title="ASCII："></a>ASCII：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> ch=<span class="hljs-string">&#x27;a&#x27;</span>;<br>System.out.println(ch+<span class="hljs-number">1</span>);<span class="hljs-comment">//会输出98</span><br>System.out.println(ch);<span class="hljs-comment">//输出a</span><br></code></pre></td></tr></table></figure><h3 id="基础语法：数据类型"><a href="#基础语法：数据类型" class="headerlink" title="基础语法：数据类型"></a>基础语法：数据类型</h3><p>数据类型就是约束存储数据的形式</p><h5 id="整数：byte-short-int-default-long"><a href="#整数：byte-short-int-default-long" class="headerlink" title="整数：byte,short,int(default),long"></a>整数：byte,short,int(default),long</h5><h5 id="浮点数：float-double-default"><a href="#浮点数：float-double-default" class="headerlink" title="浮点数：float,double(default)"></a>浮点数：float,double(default)</h5><h5 id="字符：char"><a href="#字符：char" class="headerlink" title="字符：char"></a>字符：char</h5><h5 id="布尔：Boolean"><a href="#布尔：Boolean" class="headerlink" title="布尔：Boolean"></a>布尔：Boolean</h5><h6 id="随便写一个小数默认double-但是再后面加一个F-x2F-f表示float"><a href="#随便写一个小数默认double-但是再后面加一个F-x2F-f表示float" class="headerlink" title="随便写一个小数默认double,但是再后面加一个F&#x2F;f表示float"></a>随便写一个小数默认double,但是再后面加一个F&#x2F;f表示float</h6><h5 id="引用数据类型："><a href="#引用数据类型：" class="headerlink" title="引用数据类型："></a>引用数据类型：</h5><p>String 变量名&#x3D;字符串</p><h3 id="基础语法：关键字，标识符"><a href="#基础语法：关键字，标识符" class="headerlink" title="基础语法：关键字，标识符"></a>基础语法：关键字，标识符</h3><h5 id="关键字："><a href="#关键字：" class="headerlink" title="关键字："></a>关键字：</h5><p>Java保留了一些单词，作为特殊功能，例如：public，class……</p><p>不用特意记住，会报错</p><h5 id="标识符："><a href="#标识符：" class="headerlink" title="标识符："></a>标识符：</h5><p>基本要求：由数字，字母，下划线和美元符号组成</p><p>强制要求：不能以数字开头，不能是关键字，区分大小写</p><h3 id="类型转换：自动类型转换"><a href="#类型转换：自动类型转换" class="headerlink" title="类型转换：自动类型转换"></a>类型转换：自动类型转换</h3><ul><li>类型范围小的变量可以赋值给类型范围大的变量</li><li>在表达式中，小范围类型的变量会自动转换成当前较大范围的类型在运算</li><li>最终类型由表达式中最高类型决定</li><li>强制类型转换：int a&#x3D;20 byte b&#x3D;(byte) a,由于a的值是在后八位存储的，故可以放入b</li></ul><h3 id="基本算数运算符"><a href="#基本算数运算符" class="headerlink" title="基本算数运算符"></a>基本算数运算符</h3><p>加减乘都相同</p><p>除，两个整数相除还是整数，因为最高类型为整数</p><p>取余，%</p><h5 id="数据拆分"><a href="#数据拆分" class="headerlink" title="数据拆分"></a>数据拆分</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需求，一个三位数，将其分别拆分为个十百分别输出</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">int</span> data=<span class="hljs-number">589</span>;<br>    <span class="hljs-type">int</span> ge=data%<span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> shi=data/<span class="hljs-number">10</span>%<span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> bai=data/<span class="hljs-number">100</span>%<span class="hljs-number">10</span>;<br>    System.out.println(ge);<br>    System.out.println(shi);<br>    System.out.println(bai);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="符号做连接符"><a href="#符号做连接符" class="headerlink" title="+符号做连接符"></a>+符号做连接符</h5><p>“+”与运算符一起时做连接符，结果还是一个字符串</p><h5 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h5><p>++自增，变量自身的值加一</p><p>–自减，变量自身的值减一</p><p>只能应用于变量，不能应用于常数</p><p>放在变量前面，是先加减，在使用变量</p><p>放在变量后面，先使用变量，再进行加减</p><h5 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h5><p>+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;，%&#x3D;</p><h5 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h5><p>&#x3D;&#x3D;，！&#x3D;，&gt;,&gt;&#x3D;,&lt;,&lt;&#x3D;</p><p>对数据进行条件判断的符号，最终会返回一个比较多布尔结果</p><h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><p>可以把多个条件的布尔结果放在一起运算，最终返回一个布尔结果</p><p>&amp;逻辑与&amp;&amp;短路与，前一个为F后一个不执行了</p><p>|或||短路或，前一个为T,后一个条件不执行了</p><p>！逻辑非</p><p>^ 逻辑异或</p><h5 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h5><h6 id="格式：条件表达式-？值1：值2"><a href="#格式：条件表达式-？值1：值2" class="headerlink" title="格式：条件表达式 ？值1：值2"></a>格式：条件表达式 ？值1：值2</h6><p>首先计算条件表达式的值，T则返回1，否则2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> score=<span class="hljs-number">100</span>;<br>String rs=score&gt;=<span class="hljs-number">60</span>?<span class="hljs-string">&quot;考试通过&quot;</span>:<span class="hljs-string">&quot;挂科&quot;</span>;<br>System.out.println(rs);<span class="hljs-comment">//输出结果为考试通过</span><br></code></pre></td></tr></table></figure><h5 id="优先级问题"><a href="#优先级问题" class="headerlink" title="优先级问题"></a>优先级问题</h5><p>在表达式中，哪个运算符先执行要看优先级</p><h3 id="API介绍，案例介绍：键盘录入"><a href="#API介绍，案例介绍：键盘录入" class="headerlink" title="API介绍，案例介绍：键盘录入"></a>API介绍，案例介绍：键盘录入</h3><p>键盘录入的步骤：</p><ul><li><p>导包：import java.util.Scanner</p></li><li><p>写一行代码得到键盘扫描器对象：Scanner sc&#x3D; new Scanner(System.in)</p></li><li><p>等待接收用户输入数据：int age&#x3D;sc.nextInt();</p><p>​                                           String name&#x3D;sc.next();</p></li><li><p>System,String在jdk中的java.lang包下，不需要导包</p></li></ul><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h5 id="if分支结构："><a href="#if分支结构：" class="headerlink" title="if分支结构："></a>if分支结构：</h5><h6 id="if（条件表达式）-……"><a href="#if（条件表达式）-……" class="headerlink" title="if（条件表达式）{……}"></a>if（条件表达式）{……}</h6><h6 id="else-if（条件表达式）-……"><a href="#else-if（条件表达式）-……" class="headerlink" title="else if（条件表达式）{……}"></a>else if（条件表达式）{……}</h6><p>​else{……}</p><p>和C++一样</p><h5 id="switch分支结构"><a href="#switch分支结构" class="headerlink" title="switch分支结构"></a>switch分支结构</h5><h6 id="switch-表达式"><a href="#switch-表达式" class="headerlink" title="switch(表达式){"></a>switch(表达式){</h6><h6 id="case-值1："><a href="#case-值1：" class="headerlink" title="case 值1："></a>case 值1：</h6><h6 id="……"><a href="#……" class="headerlink" title="……"></a>……</h6><h6 id="break；"><a href="#break；" class="headerlink" title="break；"></a>break；</h6><h6 id="case-值2："><a href="#case-值2：" class="headerlink" title="case 值2："></a>case 值2：</h6><h6 id="……-1"><a href="#……-1" class="headerlink" title="……"></a>……</h6><h6 id="break；-1"><a href="#break；-1" class="headerlink" title="break；"></a>break；</h6><h6 id="case-值3："><a href="#case-值3：" class="headerlink" title="case 值3："></a>case 值3：</h6><h6 id="……-2"><a href="#……-2" class="headerlink" title="……"></a>……</h6><h6 id="break；-2"><a href="#break；-2" class="headerlink" title="break；"></a>break；</h6><h6 id="default"><a href="#default" class="headerlink" title="default:"></a>default:</h6><h6 id="……-3"><a href="#……-3" class="headerlink" title="……"></a>……</h6><h6 id="-1"><a href="#-1" class="headerlink" title="}"></a>}</h6><ul><li>switch注意事项：</li></ul><p>​表达式类型只能是byte,short,int,char,不支持double,float,long</p><p>​case给出的值不能重复</p><p>​不能忘记break，否则会出现穿透</p><p>比较：</p><ul><li>if在功能上强于switch</li><li>if适合做区间匹配，switch适合值匹配</li><li>switch优雅且性能好</li></ul><h3 id="循环结构："><a href="#循环结构：" class="headerlink" title="循环结构："></a>循环结构：</h3><p>for循环和C++一样</p><p>while循环和C++一样</p><h5 id="do-while循环："><a href="#do-while循环：" class="headerlink" title="do_while循环："></a>do_while循环：</h5><p>先执行再判断循环条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<span class="hljs-comment">//初始化语句</span><br><span class="hljs-keyword">do</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<span class="hljs-comment">//循环体语句</span><br>    i++;<span class="hljs-comment">//迭代语句</span><br>&#125;<span class="hljs-keyword">while</span>(i&lt;<span class="hljs-number">3</span>)<span class="hljs-comment">//循环条件</span><br></code></pre></td></tr></table></figure><h5 id="死循环："><a href="#死循环：" class="headerlink" title="死循环："></a>死循环：</h5><p>for(;;)</p><p>while(true)</p><h5 id="跳转控制语句："><a href="#跳转控制语句：" class="headerlink" title="跳转控制语句："></a>跳转控制语句：</h5><p>break：跳出并结束当前所在循环的执行</p><p>continue：用于跳出当前循环的当次执行，进入下一次循环</p><h3 id="random类，猜数字游戏"><a href="#random类，猜数字游戏" class="headerlink" title="random类，猜数字游戏"></a>random类，猜数字游戏</h3><p>作用：用于在程序中获取随机数</p><h5 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h5><ul><li>导包：import java.util.Random;</li><li>写一行代码代表得到的随机数对象：Random r&#x3D;new Random();</li><li>调用随机数功能获取0-9的随机数：int number&#x3D;r.nextInt(10);</li></ul><p>nextInt(n),只能生成0-n-1，不包含n</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br>Random r=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-type">int</span> number=r.nextInt(bound:<span class="hljs-number">10</span>);<span class="hljs-comment">//边界值</span><br><span class="hljs-comment">//减加法</span><br><span class="hljs-comment">//3-17=（0-14）+3</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//随机生成一个1-100之间的数据，提示用户猜测，猜测大了提示大了，小了提示小了，直至结束游戏</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        Random r=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">int</span> Num=r.nextInt(<span class="hljs-number">100</span>)+<span class="hljs-number">1</span>;<br><br>        Scanner sc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;请输入你猜的数字：&quot;</span>);<br>            <span class="hljs-type">int</span> guess=sc.nextInt();<span class="hljs-comment">//键入数字</span><br>            <span class="hljs-keyword">if</span>(guess&gt;Num)&#123;<br>                System.out.println(<span class="hljs-string">&quot;大了&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(guess&lt;Num)&#123;<br>                System.out.println(<span class="hljs-string">&quot;小了&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;中了&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">//退出while死循环</span><br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h6 id="C-定义数组：int-arr-k-int-arr"><a href="#C-定义数组：int-arr-k-int-arr" class="headerlink" title="C++定义数组：int arr[k]int arr[]"></a>C++定义数组：int arr[k]int arr[]</h6><h5 id="Java静态初始化数组的格式：数据类型-变量名-x3D-（new-double-x2F-x2F-完整）-元素1，元素2，……，元素n"><a href="#Java静态初始化数组的格式：数据类型-变量名-x3D-（new-double-x2F-x2F-完整）-元素1，元素2，……，元素n" class="headerlink" title="Java静态初始化数组的格式：数据类型[]变量名&#x3D;（new double[]&#x2F;&#x2F;完整）{元素1，元素2，……，元素n}"></a>Java静态初始化数组的格式：数据类型[]变量名&#x3D;（new double[]&#x2F;&#x2F;完整）{元素1，元素2，……，元素n}</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] ages=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<span class="hljs-comment">//数组的定义</span><br>System.out.println(ages[<span class="hljs-number">0</span>]);<span class="hljs-comment">//数组的访问</span><br>ages.length;<span class="hljs-comment">//数组的长度</span><br>ages.length-<span class="hljs-number">1</span>;<span class="hljs-comment">//数组的最大索引    </span><br></code></pre></td></tr></table></figure><h5 id="动态初始化数组：int-arr-x3D-new-int-3-只定义元素的类型和数组长度，之后再存入数据"><a href="#动态初始化数组：int-arr-x3D-new-int-3-只定义元素的类型和数组长度，之后再存入数据" class="headerlink" title="动态初始化数组：int[] arr&#x3D;new int[3];只定义元素的类型和数组长度，之后再存入数据"></a>动态初始化数组：int[] arr&#x3D;new int[3];只定义元素的类型和数组长度，之后再存入数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span>[] scores=<span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">3</span>];<span class="hljs-comment">//动态定义数组</span><br></code></pre></td></tr></table></figure><h5 id="默认值："><a href="#默认值：" class="headerlink" title="默认值："></a>默认值：</h5><ul><li>一般类型都是0或者0.0</li><li>Boolean为false</li><li>其他接口类型以及string默认为null</li></ul><h6 id="静态和动态定义数组的方式是独立的不能混用。"><a href="#静态和动态定义数组的方式是独立的不能混用。" class="headerlink" title="静态和动态定义数组的方式是独立的不能混用。"></a>静态和动态定义数组的方式是独立的不能混用。</h6><h5 id="数组的遍历："><a href="#数组的遍历：" class="headerlink" title="数组的遍历："></a>数组的遍历：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>    ……;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="数组元素求最大值："><a href="#数组元素求最大值：" class="headerlink" title="数组元素求最大值："></a>数组元素求最大值：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">int</span>[] facescore=&#123;<span class="hljs-number">15</span>,<span class="hljs-number">9000</span>,<span class="hljs-number">10000</span>,<span class="hljs-number">20000</span>,<span class="hljs-number">9500</span>,-<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-type">int</span> max=facescore[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;facescore.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(facescore[i]&gt;max)&#123;<br>            max=facescore[i];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="随机排名："><a href="#随机排名：" class="headerlink" title="随机排名："></a>随机排名：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">int</span>[] codes=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>    Scanner sc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-comment">//输入</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;codes.length;i++)&#123;<br>        <span class="hljs-type">int</span> code=sc.nextInt();<br>        codes[i]=code;<br>    &#125;<br>    <span class="hljs-comment">//随机</span><br>    Random r=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;codes.length;i++)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span>r.nextInt(codes.length);<br>        <span class="hljs-type">int</span> temp=codes[index];<br>        code[index]=codes[i];<br>        codes[i]=codes[index];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="冒泡排序："><a href="#冒泡排序：" class="headerlink" title="冒泡排序："></a>冒泡排序：</h5><p>思想：每次从数组中找出最大值放到数组的后面去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">int</span>[] arr=&#123;<span class="hljs-number">8</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>        <span class="hljs-comment">//定义一个循环控制的比较次数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length-i;j++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i]&gt;arr[j+<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-type">int</span> temp=arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>]=arr[j];<br>                arr[j]=temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="debug工具的使用"><a href="#debug工具的使用" class="headerlink" title="debug工具的使用"></a>debug工具的使用</h3><p>可以孔子代码从断点开始一行一行的执行，然后详细观看执行情况。</p><p><img src="/2022/07/11/Java%E5%9F%BA%E7%A1%80/3.jpg"></p><p><img src="/2022/07/11/Java%E5%9F%BA%E7%A1%80/4.jpg"></p><h3 id="方法概述"><a href="#方法概述" class="headerlink" title="方法概述"></a>方法概述</h3><p>方法是一种语法结构，它可以把一段代码封装成一个功能，以方便重复调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-type">int</span> c=a+b;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br></code></pre></td></tr></table></figure><p>好处：</p><ul><li>提高了代码的复用性</li><li>使代码逻辑更加清晰</li></ul><h3 id="方法定义、常见问题"><a href="#方法定义、常见问题" class="headerlink" title="方法定义、常见问题"></a>方法定义、常见问题</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">修饰符(暂时为<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>)返回值类型方法名（形参列表）&#123;<br>方法体代码；<br><span class="hljs-keyword">return</span> 值；<br>&#125;<br></code></pre></td></tr></table></figure><p>不需要返回结果则选择void</p><h5 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h5><ul><li>方法编写的顺序无所谓</li><li>方法与方法之间是平级关系，不能嵌套定义</li><li>返回值为void则不能使用return，若有固定的返回值类型，则必须使用return返回值</li><li>return语句下面不写代码，因为return后不会再执行</li><li>方法不调用就不执行，调用时必须严格匹配方法的参数情况</li></ul><h5 id="eg1：计算1-n的和返回"><a href="#eg1：计算1-n的和返回" class="headerlink" title="eg1：计算1-n的和返回"></a>eg1：计算1-n的和返回</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        sum+=i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;1-5的和是：&quot;</span>+sum(<span class="hljs-number">5</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="eg2-判断整数是奇数还是偶数"><a href="#eg2-判断整数是奇数还是偶数" class="headerlink" title="eg2:判断整数是奇数还是偶数"></a>eg2:判断整数是奇数还是偶数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//不需要返回值</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    Scanner sc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-type">int</span> shu=sc.nextInt;<br>    judge(shu);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">if</span>(b%<span class="hljs-number">2</span>=<span class="hljs-number">0</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;该数字是偶数&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;该数字是奇数&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="方法的内存调用"><a href="#方法的内存调用" class="headerlink" title="方法的内存调用"></a>方法的内存调用</h5><ul><li>方法没有被调用的时候，在方法区中的字节码文件中存放</li><li>方法被调用的时候，需要进入到栈内存中运行</li></ul><h3 id="方法的参数传递机制"><a href="#方法的参数传递机制" class="headerlink" title="方法的参数传递机制"></a>方法的参数传递机制</h3><h5 id="基本类型的参数传递：值传递"><a href="#基本类型的参数传递：值传递" class="headerlink" title="基本类型的参数传递：值传递"></a>基本类型的参数传递：值传递</h5><p>在传输实参给方法形参的时候，并不是串数实参变量的本身，二十传输实参变量中存储的值，这就是值传递</p><p>实参：如在方法内部定义的变量</p><p>形参：如在定义方法是，”()”中所声明的参数</p><h5 id="引用类型的参数传递：值传递"><a href="#引用类型的参数传递：值传递" class="headerlink" title="引用类型的参数传递：值传递"></a>引用类型的参数传递：值传递</h5><h6 id="基本类型参数传输存储的是数据值，不会修改原有的"><a href="#基本类型参数传输存储的是数据值，不会修改原有的" class="headerlink" title="基本类型参数传输存储的是数据值，不会修改原有的"></a>基本类型参数传输存储的是数据值，不会修改原有的</h6><h6 id="引用类型参数传输存储的是地址值，会修改原有的"><a href="#引用类型参数传输存储的是地址值，会修改原有的" class="headerlink" title="引用类型参数传输存储的是地址值，会修改原有的"></a>引用类型参数传输存储的是地址值，会修改原有的</h6><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><h5 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h5><p>​同一个类中，出现多个方法名称相同，但是形参列表不用，这些方法就是重载方法</p><p>​通过参数的不同进行差异化</p><h5 id="识别技巧："><a href="#识别技巧：" class="headerlink" title="识别技巧："></a>识别技巧：</h5><p>​只要是同一个类中，方法名称相同，形参列表不同，它们就是重载的方法</p><p>​形参列表的不同是指形参的个数，类型，顺序不同，不关心形参的名称</p><h3 id="单独使用return关键字"><a href="#单独使用return关键字" class="headerlink" title="单独使用return关键字"></a>单独使用return关键字</h3><p>return可以立即跳出并结束当前方法的执行，return关键字单独使用放在任何方法中</p><p>应用：除法中，遇到除数为0，直接return跳出当前方法的执行</p><h5 id="break-是执行当前所在的循环"><a href="#break-是执行当前所在的循环" class="headerlink" title="break:是执行当前所在的循环"></a>break:是执行当前所在的循环</h5>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022/06/23/汇编复习/</title>
    <link href="/2022/06/23/%E6%B1%87%E7%BC%96%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/06/23/%E6%B1%87%E7%BC%96%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="物理地址"><a href="#物理地址" class="headerlink" title="物理地址"></a>物理地址</h3><p>CPU访问内存单元是要给出内存单元的地址。</p><p>8086的寻址能力和cpu的寻址能力不匹配，前者20位后者只有16位。</p><p>8086CPU的解决办法：</p><p>物理地址&#x3D;段地址*16+偏移地址（乘16相当于把段地址左移一位）</p><p>一个物理地址不能决定段地址和偏移地址</p><h5 id="用两个16位的地址相加得到一个20位的物理地址"><a href="#用两个16位的地址相加得到一个20位的物理地址" class="headerlink" title="用两个16位的地址相加得到一个20位的物理地址"></a>用两个16位的地址相加得到一个20位的物理地址</h5><h3 id="用分段的方式管理内存"><a href="#用分段的方式管理内存" class="headerlink" title="用分段的方式管理内存"></a>用分段的方式管理内存</h3><p>内存并没有分段，段的划分来自于CPU</p><p>一个内存段的起始地址（基础地址）为段地址的十六倍</p><ul><li>一个段的起始地址一定是十六的倍数</li><li>编译地址为十六位，十六位地址的寻址能力为64k，所以一个段的最长大小为64k</li></ul><p>eg:数据在21F60H内存单元中，段地址是2000H，说法：</p><ul><li>数据存在内存2000：1FH单元中</li><li>数据存在2000H段中的1F60H单元中</li></ul><p>四个段寄存器：</p><p>CS代码寄存器</p><p>DS数据寄存器</p><p>SS栈段寄存器</p><p>ES附加寄存器</p><h3 id="debug的使用"><a href="#debug的使用" class="headerlink" title="debug的使用"></a>debug的使用</h3><p>借debug观察计算机内部的情况</p><p>1.启动debug：</p><p>2.R-查看寄存器内容：R 寄存器名， 再进行改变</p><p>3.D-查看内存中的内容</p><p>​D 列出预设地址内存处的128个字节的内容</p><p>​D 段地址：偏移地址</p><p>4.E-改变内存中的内容：</p><p>​E 段地址：偏移地址 数据1 数据2 数据3……</p><p>​E  段地址：偏移地址 原数据.新数据 原数据.新数据……</p><p>5.U命令间隔你存中的机器指令翻译成汇编指令</p><ul><li>E 段地址：偏移地址 -写入地址（写入的全是对应的机器码）</li><li>D 地址-查看</li><li>U 地址-查看代码</li></ul><p>6 . A-以汇编指令的格式写入命令：A 地址</p><p>7 .T-执行机器指令：CS:IP 处的指令（单步执行）</p><p>8 . q退出</p><h3 id="CS-IP与代码段"><a href="#CS-IP与代码段" class="headerlink" title="CS:IP与代码段"></a>CS:IP与代码段</h3><p>CS:代码寄存器</p><p>IP：指令指针寄存器（只有CPU自己能够进行修改，不能用mov）</p><p>1.从所指向的内存单元读取指令，读取的指令进入指令缓冲器</p><p>2.IP&#x3D;IP+所读取指令的长度，从而指向下一条指令</p><p>3.执行指令，转到步骤1，重复过程</p><h6 id="先-r看一哈cs和ip的指向哪里，再修改值，向相应的单元写入数据，再A，再U查看，也可以用D"><a href="#先-r看一哈cs和ip的指向哪里，再修改值，向相应的单元写入数据，再A，再U查看，也可以用D" class="headerlink" title="先-r看一哈cs和ip的指向哪里，再修改值，向相应的单元写入数据，再A，再U查看，也可以用D"></a>先-r看一哈cs和ip的指向哪里，再修改值，向相应的单元写入数据，再A，再U查看，也可以用D</h6><h3 id="jmp指令"><a href="#jmp指令" class="headerlink" title="jmp指令"></a>jmp指令</h3><h5 id="修改CS，IP-的方法："><a href="#修改CS，IP-的方法：" class="headerlink" title="修改CS，IP 的方法："></a>修改CS，IP 的方法：</h5><p>1.rcs,rip进行修改，但是不现实，debug是调试手段</p><p>2.转移指令jmp：</p><p>​同时修改cs,ip：jmp 段地址：偏移地址</p><p>​仅修改ip的内容：jmp 某一合法寄存器（jmp ax&#x3D;mov ip ax但是后者不能用)</p><h5 id="jmp可以用于循环"><a href="#jmp可以用于循环" class="headerlink" title="jmp可以用于循环"></a>jmp可以用于循环</h5><h3 id="内存中字的存储"><a href="#内存中字的存储" class="headerlink" title="内存中字的存储"></a>内存中字的存储</h3><p>对于8086CPU,16位作为一个字，16位的字在内存中需要两个连续字节存储：</p><h5 id="低位字节存放在低地址单元，高位字节存放在高地址单元"><a href="#低位字节存放在低地址单元，高位字节存放在高地址单元" class="headerlink" title="低位字节存放在低地址单元，高位字节存放在高地址单元"></a>低位字节存放在低地址单元，高位字节存放在高地址单元</h5><p>eg：4B20H存放在0，1两个单元。20存放在0单元，4B放在1单元</p><p>​0地址单元中存放的<strong>字节数据</strong>是20H</p><p>​0地址字单元存放的<strong>字型数据</strong>是4E20H</p><h6 id="读的时候先读高地址单元再读低地址单元"><a href="#读的时候先读高地址单元再读低地址单元" class="headerlink" title="读的时候先读高地址单元再读低地址单元"></a>读的时候先读高地址单元再读低地址单元</h6><h3 id="用DS和-address-实现字的传送"><a href="#用DS和-address-实现字的传送" class="headerlink" title="用DS和[address]实现字的传送"></a>用DS和[address]实现字的传送</h3><p>CPU从内存单元中读取数据：</p><p>​用DS寄存器存放要访问数据的段地址</p><p>​偏移地址用[……]的形式直接给出</p><p>eg:mov bx,1000h</p><p>​mov ds,bx</p><p>​mov al,[0]</p><p>以上代码段的意思是将1000：0处的数据读到al中</p><p>eg:mov bx,1000h</p><p>​mov ds,bx</p><p>​mov [0]，al</p><p>以上代码段的意思是将al中的数据写到1000：0中</p><h6 id="不支持将数据直接送入段寄存器，要先送入基础寄存器"><a href="#不支持将数据直接送入段寄存器，要先送入基础寄存器" class="headerlink" title="不支持将数据直接送入段寄存器，要先送入基础寄存器"></a>不支持将数据直接送入段寄存器，要先送入基础寄存器</h6><h6 id="每次读两个单元，如果为-0-则读的实际数据是-1-0"><a href="#每次读两个单元，如果为-0-则读的实际数据是-1-0" class="headerlink" title="每次读两个单元，如果为[0],则读的实际数据是[1] [0]"></a>每次读两个单元，如果为[0],则读的实际数据是[1] [0]</h6><h3 id="DS与数据段"><a href="#DS与数据段" class="headerlink" title="DS与数据段"></a>DS与数据段</h3><p>将哪段内存当作数据段，段地址如何定，在编程时安排</p><p>​用DS存放数据段的段地址</p><p>​用相关指令访问数据的具体单元，单元地址有[address]给出</p><p>eg:累加数据段中前3个单元的数据：add al,[0]    add al,[1]add al,[2]</p><p>​累加数据段中前3个字型数据：add ax,[0]add ax,[2]add ax,[4]</p><h3 id="栈及栈操作的实现"><a href="#栈及栈操作的实现" class="headerlink" title="栈及栈操作的实现"></a>栈及栈操作的实现</h3><p> 栈是一种只能在一端进行插入或者删除的数据结构</p><p>入栈push：</p><p>​push ax 将ax中的数据送入栈中</p><p>出栈pop:</p><p>​pop ax 将栈顶的数据送入ax</p><h6 id="都是以字为单位进行的操作-栈越往上内存地址越小"><a href="#都是以字为单位进行的操作-栈越往上内存地址越小" class="headerlink" title="都是以字为单位进行的操作,栈越往上内存地址越小"></a>都是以字为单位进行的操作,栈越往上内存地址越小</h6><h5 id="CPU如何知道一段内存被当作栈使用？"><a href="#CPU如何知道一段内存被当作栈使用？" class="headerlink" title="CPU如何知道一段内存被当作栈使用？"></a>CPU如何知道一段内存被当作栈使用？</h5><p>SS是栈段寄存器：存放栈顶的段地址</p><p>SP是栈顶指针寄存器：存放栈顶的偏移地址</p><h6 id="任何时刻，SS：SP指向栈顶元素"><a href="#任何时刻，SS：SP指向栈顶元素" class="headerlink" title="任何时刻，SS：SP指向栈顶元素"></a>任何时刻，SS：SP指向栈顶元素</h6><h5 id="栈的操作"><a href="#栈的操作" class="headerlink" title="栈的操作"></a>栈的操作</h5><p>push ax:</p><p>​SP&#x3D;SP-2</p><p>​将ax中的内容送入SS：SP指向的内存单元，指向新栈顶SS: SP</p><p>pop ax:</p><p>​将SS :SP指向的内存单元处的数据送入ax中</p><p>​SP&#x3D;SP+2</p><h5 id="栈顶超界问题"><a href="#栈顶超界问题" class="headerlink" title="栈顶超界问题"></a>栈顶超界问题</h5><p>栈顶超界是危险的，在执行push和pop指令都可能出现</p><p>CPU不保证栈顶不会超界</p><h3 id="段的总结"><a href="#段的总结" class="headerlink" title="段的总结"></a>段的总结</h3><p>物理地址&#x3D;段地址*16+偏移地址</p><h5 id="数据段："><a href="#数据段：" class="headerlink" title="数据段："></a>数据段：</h5><p>段地址放在DS中，与[address]搭配使用，用mov,add,sub等访问时将内存单元中的内容当作数据来访问</p><h5 id="代码段："><a href="#代码段：" class="headerlink" title="代码段："></a>代码段：</h5><p>CS和IP用于指向要寻找的代码段</p><h5 id="栈段："><a href="#栈段：" class="headerlink" title="栈段："></a>栈段：</h5><p>SS和SP,采用push和pop指令，其中SP的加减取决于指令，需要进行栈段的操作是就用这个</p><h5 id="三个段地址可以一样"><a href="#三个段地址可以一样" class="headerlink" title="三个段地址可以一样"></a>三个段地址可以一样</h5><h3 id="用汇编语言写的源程序"><a href="#用汇编语言写的源程序" class="headerlink" title="用汇编语言写的源程序"></a>用汇编语言写的源程序</h3><p>汇编程序——编译器——机器码——计算机执行</p><p>汇编代码中的汇编指令称为伪指令</p><h5 id="段定义："><a href="#段定义：" class="headerlink" title="段定义："></a>段定义：</h5><p>一个汇编程序是由多个段组成的，这些段被用来存放代码，数据，或者当作栈空间来使用</p><p>一个有意义的汇编程序至少要有一个段，这个段用来存放代码</p><h6 id="定义程序的段：每个段都需要段名"><a href="#定义程序的段：每个段都需要段名" class="headerlink" title="定义程序的段：每个段都需要段名"></a>定义程序的段：每个段都需要段名</h6><p>eg:段名 segment——段的开始</p><p>​ 段名 ends——段的结束</p><h5 id="end"><a href="#end" class="headerlink" title="end:"></a>end:</h5><p>不是<strong>ends</strong> ，若程序结尾处不加end，编译器在编译程序时不知道程序在何处结束</p><h5 id="assume："><a href="#assume：" class="headerlink" title="assume："></a>assume：</h5><p>假设某一段寄存器和程序中某一个用segment……ends定义的相关段相关联——assume cs:codesg指的是CS寄存器和codesg关联，将定义的codesg当作程序的代码段使用</p><h5 id="汇编程序-asm——可执行程序-exe："><a href="#汇编程序-asm——可执行程序-exe：" class="headerlink" title="汇编程序.asm——可执行程序.exe："></a>汇编程序.asm——可执行程序.exe：</h5><p>1.在debug中直接写入指令：适用于功能简单，短小精悍</p><p>2.单独写源程序文件后再进行编译：适用于编写大程序，需要包括汇编指令还需要伪指令，由段构成</p><h5 id="如何写一个程序："><a href="#如何写一个程序：" class="headerlink" title="如何写一个程序："></a>如何写一个程序：</h5><p>编程求2^3:</p><p>定义一个段</p><p>实现处理任务</p><p>指出程序在何处结束</p><p>短语寄存器的关联</p><p>加上程序返回时的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs assembly">assume cs:abc<br>abc segment<br>    mov ax,2<br>    add ax,ax<br>    add ax,ax<br>    <br>    mov ax,4c00h<br>    int 21h;表示返回正常<br>abc ends<br>end<br><br></code></pre></td></tr></table></figure><h5 id="程序可能发现的错误："><a href="#程序可能发现的错误：" class="headerlink" title="程序可能发现的错误："></a>程序可能发现的错误：</h5><p>语法错误：编译时被编译器发现</p><p>逻辑错误</p><h3 id="由源程序到程序运行"><a href="#由源程序到程序运行" class="headerlink" title="由源程序到程序运行"></a>由源程序到程序运行</h3><h5 id="编辑源程序："><a href="#编辑源程序：" class="headerlink" title="编辑源程序："></a>编辑源程序：</h5><p>写好asm文件</p><h5 id="编译："><a href="#编译：" class="headerlink" title="编译："></a>编译：</h5><p>masm xx.asm,得到目标文件xx.obj，或者直接masm,再进行写文件名</p><h5 id="连接："><a href="#连接：" class="headerlink" title="连接："></a>连接：</h5><p>link (obj的名字)</p><p>no stack segment可以不管</p><h3 id="用debug跟踪程序运行"><a href="#用debug跟踪程序运行" class="headerlink" title="用debug跟踪程序运行"></a>用debug跟踪程序运行</h3><p>用法：debug xx.exe</p><p>程序加载后，DS中存放着程序所在内存区的段地址，这个内存区的偏移地址为0，则程序所在的内存区的地址为DS：0</p><p>这个内存区的前256个字节村PSP（段前缀），DOS用来和程序进行通信，256字节后的空间存放处是程序，CS的值为DS+10H</p><p>程序加载后CX中存放代码的长度</p><p>-t单步执行</p><p>-p类似t命令，但遇到子程序或者中断时，直接执行然后显示结果</p><h3 id="…-…"><a href="#…-…" class="headerlink" title="[…] (…)"></a>[…] (…)</h3><p>[]——在汇编语法中表示一个内存单元，根据ax和al判断操作单位是字还是字节：[bx]&#x3D;((ds)*16+(bx))</p><p>()——在学习中为了方便做出的约定，表示一个内存单元或寄存器的内容：(ax)&#x3D;0010H</p><p>idata——表示常量</p><p>inc :加一指令</p><h3 id="loop指令"><a href="#loop指令" class="headerlink" title="loop指令"></a>loop指令</h3><p>功能：循环（计数型循环）</p><p>CPU执行loop指令是要进行的操作</p><p>​（cx）&#x3D;(cx)-1</p><p>​  判断CX中的值：不为0则转至表好处执行程序，如果为0则向下执行</p><p>要求：cx中要提前存放循环次数，因为（cx)影响这loop指令执行的结果，定义一个标号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br>mov ax,2<br>mov cx,11<br>   s:add ax,ax;计算2^12<br>    loop s<br>    <br>    mov ax,4c00h<br>    int 21h<br>code ends<br>end<br></code></pre></td></tr></table></figure><p>用loop实现循环的三个要点：</p><p>1.在cx中存放循环次数</p><p>2.用标号指定循环开始的位置</p><p>3.在标号和loop指令的中间要写上循环执行的程序段（循环体）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;计算 123*236，用加法解决乘法<br>assume cs:code <br>code segment<br>mov ax,0<br>mov cx,123<br>s:add ax 256<br>loop s<br><br>mov ax,4c00h<br>int 21h<br>code ends<br>end<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;计算ffff:0006字节单元中的数乘以3，结果储存在DX中<br>assume cs:code<br>code segment<br>mov ax,0ffffh;汇编源程序中，数据不能以字母开头，要在ffff前加0<br>mov ds,ax<br>mov bx,6<br>mov al,[bx];将题目中内存单元的数据放入ax中，要求以字节单元<br>mov ah,0;将高八位置零<br><br>mov dx,0<br>mov cx,3<br>s:add dx,ax<br>loop s<br><br>mov ax,4c00h<br>int 21h<br>code ends<br>end<br>;要考虑会不会溢出<br></code></pre></td></tr></table></figure><h3 id="段前缀的使用"><a href="#段前缀的使用" class="headerlink" title="段前缀的使用"></a>段前缀的使用</h3><p>为了防止在程序段中的mov ax,[0]这种类似的形式在编译时被编译成<strong>mov</strong> <strong>ax</strong> ,<strong>00</strong>被当成了数据而不是偏移地址</p><p>对策：在[idata]前显式的加上寄存器：mov ax,ds:[bx]</p><h5 id="访问连续的内存单元：loop和-bx-联手"><a href="#访问连续的内存单元：loop和-bx-联手" class="headerlink" title="访问连续的内存单元：loop和[bx]联手"></a>访问连续的内存单元：loop和[bx]联手</h5><p>问题：计算ffff:0~ffff:b字节单元中的数据的和，结果储存在dx中？</p><p>对策：取出8位数据，加到16位寄存器</p><p>​mov al,ds:[addr]</p><p>​mov ah,0</p><p>​add dx,ax</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;计算ffff:0~ffff:b字节单元中的数据的和，结果储存在dx中？<br>;采用loop循环<br>assume cs:code<br>code segment<br>mov ax,0ffffh<br>mov ds,ax<br><br>mov bx,0<br>mov cx,11<br>mov dx,0<br>s:mov al,[bx]<br>mov ah,0<br>add dx,ax<br>inc bx<br>loop s<br><br>mov ax,4c00h<br>int 21h<br>code ends<br>end<br>;当程序段中有多个段的时候，如拷贝，此时段前缀很有用，es称为附加段寄存器，段前缀不一样，偏移量一样<br></code></pre></td></tr></table></figure><h3 id="在代码中使用数据"><a href="#在代码中使用数据" class="headerlink" title="在代码中使用数据"></a>在代码中使用数据</h3><p>问题：</p><p>​在程序中直接写地址是危险的</p><p>对策：</p><p>​在程序的段中存放数据，运行时由操作系统分配空间</p><p>​段的类别：数据段，代码段，栈段</p><p>​各种段中均可以有数据</p><p>​可以在单个段中安置，也可以将数据，代码，栈放入不同的段中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;编程计算八个数据的和，结果存在ax寄存器中、<br>;dw定义一个字；db定义一个字节；dd定义一个双字<br>assume cs:code<br>code segment<br>dw 0123h,0456h,0789h,0defh,0fedh,0cbah,0987h;将所有数据以字的行书存放在代码段中<br><br>mov bx,0<br>mov ax,0<br>mov cx,8;用作循环<br><br>s:add ax,cs:[bx]<br>add bx,2<br>loop s<br><br>mov ax,4c00h<br>int 21h<br>code ends<br>end<br>;该程序前属于数据段，而ip存放的从0开始，所以该代码段存在不足<br>;要求从代码段开始<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;改进<br>assume cs:code<br>code segment<br>dw 0123h,0456h,0789h,0defh,0fedh,0cbah,0987h;将所有数据以字的行书存放在代码段中<br><br>start:mov bx,0<br>mov ax,0<br>mov cx,8;用作循环<br><br>s:add ax,cs:[bx]<br>add bx,2<br>loop s<br><br>mov ax,4c00h<br>int 21h<br>code ends<br>end start<br>;此时代码的开始从代码段开始<br></code></pre></td></tr></table></figure><h3 id="在代码中使用栈"><a href="#在代码中使用栈" class="headerlink" title="在代码中使用栈"></a>在代码中使用栈</h3><p>问题：利用栈，将程序中定义的数据逆序存放</p><p>对策：依次将八个子单元的数据入栈，在出栈，实现逆序。可以定义空来取得空</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br>dw 0123h,0456h,0789h,0defh,0fedh,0cbah,0987h;将所有数据以字的行书存放在代码段中<br>dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0;栈段，占用32个字节，此时代码段从30h开始，故此时的sp在30h<br><br> start:mov ax,cs<br>mov ss,ax<br>mov sp,30h<br><br>;入栈<br>mov bx,0<br>mov cx,8<br> s0:push cs:[bx]<br>add bx,2<br>loop s0<br><br>;出栈<br>mov bx,0<br>mov cx,8<br> s1:pop cs:[bx]<br>add bx,2<br>loop s0<br><br> mov ax,4c00h<br> int 21h<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="将数据，代码，栈放入不同段"><a href="#将数据，代码，栈放入不同段" class="headerlink" title="将数据，代码，栈放入不同段"></a>将数据，代码，栈放入不同段</h3><p>特点：三种都在一个段</p><p>功能：应用于要处理的数据很少，用到的占空间也小，加上没有多长的代码</p><p>对策：遇到很大的放入不同段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code,ds:data,ss:stack<br>data segmemt<br>dw 0123h,0456h,0789h,0defh,0fedh,0cbah,0987h;将所有数据以字的行书存放在代码段中<br>data ends<br>stack segment<br>dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br>stack ends<br>code segment<br>start:<br>;初始化各段寄存器，CS是默认的，不需要初始化<br>mov ax,data<br>mov ds,ax<br>mov ax,stack<br>mov ss,ax<br>mov so,20h;实际所占内存加一<br><br>;入栈<br>mov bx,0<br>mov cx,8<br> s0:push [bx];此时不指明也知道就是ds中的<br> add bx,2<br> loop s<br> <br> ;出栈<br> mov bx,0<br> mov cx,8<br> s1:pop [bx]<br> add bx,2<br> loop s1<br> <br> mov ax,4c00h<br> int 21h<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="处理字符问题"><a href="#处理字符问题" class="headerlink" title="处理字符问题"></a>处理字符问题</h3><p>汇编程序中，用’……’的方式指明数据是字符串，转化为ASCII码</p><p>大写字母的ASCII比小写的小20H</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;解决大小写转换的问题<br>;首字母大写全部转化为大写，首字母为小写全部转化为小写<br>assume cs:code,ds:datasg<br>datasg segment<br>db &#x27;BasIc&#x27;<br>db &#x27;iNfoRMaTiOn&#x27;<br>datasg ends<br>code segment<br>start:mov ax,datasg<br>mov ds,ax<br>mov bx,0<br>mov cx,5<br>s:mov al,[bx]<br>and al,11011111b;小写字母转化为大写<br>mov [bx],al<br>inc bx<br>loop s<br><br>mov bx,5<br>mov cx,11<br>s1:mov al,[bx]<br>or al,00100000b;大写字母转化为小写<br>mov [bx],al<br>inc bx<br>loop s1<br><br>mov ax,4c00h<br>int 21h<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="bx-idata-寻址方式"><a href="#bx-idata-寻址方式" class="headerlink" title="[bx+idata]寻址方式"></a>[bx+idata]寻址方式</h3><p>[bx+idata]表示一个内存单元，它的偏移地址为(bx)+idata</p><p>mov ax,[bx+200]的含义：</p><p>​将一个内存单元送入ax</p><p>​这个内存单元长度为两个字节，存放一个字</p><p>​内存单元的段地址在ds内，偏移地址为200加上bx中的数值</p><p>​数学化的描述为：(ax)&#x3D;((ds)*16+200+(bx))</p><h5 id="bx-200-还能表示为-200-bx-bx-200-200-bx"><a href="#bx-200-还能表示为-200-bx-bx-200-200-bx" class="headerlink" title="[bx+200]还能表示为[200+bx],[bx].200,200[bx]"></a>[bx+200]还能表示为[200+bx],[bx].200,200[bx]</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;用[bx+idata]处理上面的问题<br>;解决大小写转换的问题<br>;首字母大写全部转化为大写，首字母为小写全部转化为小写<br>assume cs:code,ds:datasg<br>datasg segment<br>db &#x27;BasIc&#x27;<br>db &#x27;iNfoRMaTiOn&#x27;<br>datasg ends<br>code segment<br>start:mov ax,datasg<br>mov ds,ax<br>mov bx,0<br>mov cx,5<br>s:mov al,[bx]<br>and al,11011111b;小写字母转化为大写<br>mov [bx],al<br><br>mov al,[bx+5];采用本节内容<br>or al,00100000b<br>mov [bx+5],al<br>inc bx;只在末尾加一次1就可以了<br>loop s<br><br>mov ax,4c00h<br>int 21h<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="变址寄存器SI和DI"><a href="#变址寄存器SI和DI" class="headerlink" title="变址寄存器SI和DI"></a>变址寄存器SI和DI</h3><h6 id="si和di是和bx功能相近的寄存器，也能-si-idata-di-idata"><a href="#si和di是和bx功能相近的寄存器，也能-si-idata-di-idata" class="headerlink" title="si和di是和bx功能相近的寄存器，也能[si+idata],[di+idata]"></a>si和di是和bx功能相近的寄存器，也能[si+idata],[di+idata]</h6><h6 id="bx-si-bx-di-也可以用来指定地址"><a href="#bx-si-bx-di-也可以用来指定地址" class="headerlink" title="[bx+si] [bx+di]也可以用来指定地址"></a>[bx+si] [bx+di]也可以用来指定地址</h6><p>[bx+si]表示一个内存单元：偏移地址为bx的数值加上si的数值</p><p>bx叫做基址，si叫做变址</p><h6 id="bx-si-idata-bx-di-idata-也可以用来指定地址"><a href="#bx-si-idata-bx-di-idata-也可以用来指定地址" class="headerlink" title="[bx+si+idata] [bx+di+idata]也可以用来指定地址"></a>[bx+si+idata] [bx+di+idata]也可以用来指定地址</h6><p>[bx+si+200]的其他写法：[bx+200+si] ,[bx].200[si] ,[bx] [sx].200,200[bx] [si]<strong>数值跟在寄存器后面要加点</strong></p><h3 id="寻址方式总结"><a href="#寻址方式总结" class="headerlink" title="寻址方式总结"></a>寻址方式总结</h3><p>[idata]直接寻址</p><p>[bx]寄存器寻址</p><p>[bx+idata]寄存器相对寻址</p><p>[bx+si]基址变址寻址</p><p>[bx+si+idata]相对基址变址寻址</p><h3 id="用于内存寻址的寄存器用法"><a href="#用于内存寻址的寄存器用法" class="headerlink" title="用于内存寻址的寄存器用法"></a>用于内存寻址的寄存器用法</h3><p>只有idata,bx,bp,si,di可以用于内存单元寻址，可以往方括号[]里面放</p><h5 id="bx-bp-si-di-不能这样用，是错误的"><a href="#bx-bp-si-di-不能这样用，是错误的" class="headerlink" title="[bx+bp] [si+di]不能这样用，是错误的"></a>[bx+bp] [si+di]不能这样用，是错误的</h5><h5 id="bp默认的是SS段，bx默认的是DS段，如果指定了段前缀就用指定的段"><a href="#bp默认的是SS段，bx默认的是DS段，如果指定了段前缀就用指定的段" class="headerlink" title="bp默认的是SS段，bx默认的是DS段，如果指定了段前缀就用指定的段"></a>bp默认的是SS段，bx默认的是DS段，如果指定了段前缀就用指定的段</h5><h3 id="数据的位置和长度"><a href="#数据的位置和长度" class="headerlink" title="数据的位置和长度"></a>数据的位置和长度</h3><p>1.数据的位置</p><p>​idata:称为立即数，数据包含在指令中</p><p>​寄存器：要处理的数据在寄存器中，给出相应的寄存器名字</p><p>​内存：段地址SA和偏移地址EA</p><p>2.数据的长度</p><p>​字：word操作，16位，ax</p><p>​字节：byte操作，8位,al</p><p>​未知ax或者al：用word ptr或者byte ptr指明（eg:mov word ptr ds:[0],1）</p><h3 id="div除法指令"><a href="#div除法指令" class="headerlink" title="div除法指令"></a>div除法指令</h3><p>使用div做除法的时候：被除数默认放在AX和DX和AX中，除数放在寄存器或者内存单元中</p><p>除数为8位内存或者寄存器则AL放商，AH放余数，除数位16位寄存器或者内存，则AX放商，DX放余数</p><p>eg:div bx 被除数：(DX*10000H+AX) 除数：(BX) 商：AX 余数：DX</p><h5 id="提前在默认的寄存器中设置好被除数，且默认寄存器不做别的用处，可以把其中的数据装在内存单元或者压栈"><a href="#提前在默认的寄存器中设置好被除数，且默认寄存器不做别的用处，可以把其中的数据装在内存单元或者压栈" class="headerlink" title="提前在默认的寄存器中设置好被除数，且默认寄存器不做别的用处，可以把其中的数据装在内存单元或者压栈"></a>提前在默认的寄存器中设置好被除数，且默认寄存器不做别的用处，可以把其中的数据装在内存单元或者压栈</h5><h3 id="dup的功能和用法"><a href="#dup的功能和用法" class="headerlink" title="dup的功能和用法"></a>dup的功能和用法</h3><p>功能：dup和db,dw,dd等数据定义伪指令配合使用，用来进行数据的重复</p><p>eg:</p><p>​db 3 dup(0)定义了三个字节，它们的值都是0相当于db 0,0,0</p><p>​db 3 dup(0,1,2)定义了九个字节，由0，1，2重复构成</p><p>​db 3 dup(‘abc’,’ABC’)定义了18个字节，构成‘abcABCabcABCabcABC’,一个字符一个字节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;定义一个容量为200字节的栈段<br>stack  segment<br>db 200 dup(0)<br>stack ends<br></code></pre></td></tr></table></figure><h3 id="操作符offset"><a href="#操作符offset" class="headerlink" title="操作符offset"></a>操作符offset</h3><p>用offset获得标号的偏移地址</p><p>eg:mov si,offset s</p><h3 id="jmp无条件转移"><a href="#jmp无条件转移" class="headerlink" title="jmp无条件转移"></a>jmp无条件转移</h3><p>无条件转移，可以只修改IP,也可以修改CS,IP</p><p>​段间转移（远转移）：jmp 2000:0，源程序不能这样，只能在debug中使用</p><p>​段内短转移：jmp short 标号，八位的位移量是指标号处的地址与jmp后一条指令地址的差，差要在-128~127之间</p><p>​段内近转移：jmp near ptr 标号，十六位的转移量与上面差不多，但是差值的范围更大</p><p>​远转移：far ptr指明了跳转到的目的地址，包含了标号的段地址和偏移地址</p><p>​寄存器：jmp ax,IP&#x3D;(AX)十六位</p><p>​内存：段内：jmp word ptr 地址两个字节</p><p>​段间：jmp dword ptr 地址，段地址在高位，偏移地址在低位四个字节</p><h3 id="jcxz指令"><a href="#jcxz指令" class="headerlink" title="jcxz指令"></a>jcxz指令</h3><p>格式：jcxz 标号</p><p>功能：如果（cx)&#x3D;0,则转移到目的标号处执行</p><p>​当(cx)！&#x3D;0时，则顺序执行</p><p>所有有条件的转移均为短转移</p><h3 id="call指令和ret指令"><a href="#call指令和ret指令" class="headerlink" title="call指令和ret指令"></a>call指令和ret指令</h3><p>调用子程序：call</p><p>返回：ret</p><h5 id="call："><a href="#call：" class="headerlink" title="call："></a>call：</h5><p>字面意思：调用子程序</p><p>实质：流程转移，与jmp相似</p><p>格式：call 标号</p><p>操作：</p><p>​将当前IP或者CS和IP压入栈中</p><p>​转移到标号处执行指令</p><p>​16位位移量</p><p>​call far ptr 可以实现段间转移</p><h6 id="相当于压栈和jmp的结合体"><a href="#相当于压栈和jmp的结合体" class="headerlink" title="相当于压栈和jmp的结合体"></a>相当于压栈和jmp的结合体</h6><h5 id="ret"><a href="#ret" class="headerlink" title="ret:"></a>ret:</h5><p>功能：用栈中的数据，修改IP的内容，实现金砖一，相当于pop IP</p><p>​没有call也可以用ret，实际上转移到出栈的数据所代表的位置</p><p>retf:可以实现远转移</p><h3 id="乘法mul指令"><a href="#乘法mul指令" class="headerlink" title="乘法mul指令"></a>乘法mul指令</h3><p>八位乘法：被乘数放在AL中，结果放在AX中</p><p>十六位乘法：被乘数放在AX中，结果高十六位放在DX，第十六位放在AX</p><h3 id="模块化程序设计"><a href="#模块化程序设计" class="headerlink" title="模块化程序设计"></a>模块化程序设计</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;根据提供的N，计算三次方<br>;用寄存器来存储出参数和结果是最常用的方法<br>cube:mov ax,bx;ax和dx用来保存最终的结果<br>mul bx<br>mul bx<br>ret<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;计算第一段数据的三次方，结果保存在后面一组<br>assume cs:code,ds:data<br>data segment<br>dw 1,2,3,4<br>dd 0,0,0,0<br>data ends<br>codesegment<br>start:mov ax,data<br>mov ds,ax<br>mov si,0<br>mov di,8<br><br>;进行循环处理<br>mov cx,4<br>S:mov,bx,[si]<br>call cube<br>mov [di],ax;结果的低位放在ax中<br>mov [di.2,dx;高位放在dx中<br>add si,2<br>add,di,4<br>loop s<br><br>cube:mov ax,bx<br>mul bx<br>mul bx<br>ret<br><br>mov ax,4c00h<br>int 21h<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h5 id="还可以用栈（栈顶sp放ip）和内存单元传递参数"><a href="#还可以用栈（栈顶sp放ip）和内存单元传递参数" class="headerlink" title="还可以用栈（栈顶sp放ip）和内存单元传递参数"></a>还可以用栈（栈顶sp放ip）和内存单元传递参数</h5><h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><p>标志寄存器是按位起作用的，每一位都有专门的含义</p><p>8086的1，3，5，12，13，14，15位不具有任何意义</p><p>标志寄存器的作用：</p><p>​用来储存相关指令的某些执行结果</p><p>​用来为CPU执行相关指令提供行为依据</p><p>​用来控制CPU的相关工作方式</p><p>直接访问标志寄存器的方法：</p><p>​pushf 将标志寄存器的值压入栈</p><p>​popf 从栈中弹出数据，送入标志寄存器</p><h5 id="ZF-零标志（zero-flag）"><a href="#ZF-零标志（zero-flag）" class="headerlink" title="ZF-零标志（zero flag）"></a>ZF-零标志（zero flag）</h5><p>ZF&#x3D;1，表示结果是0</p><p>ZF&#x3D;0,表示结果不是0</p><h5 id="PF-奇偶标志（parity-flag）"><a href="#PF-奇偶标志（parity-flag）" class="headerlink" title="PF-奇偶标志（parity flag）"></a>PF-奇偶标志（parity flag）</h5><p>PF&#x3D;1,1的个数是偶数</p><p>PF&#x3D;0,1的个数是奇数</p><h5 id="SF-符号标志（sign-flag）"><a href="#SF-符号标志（sign-flag）" class="headerlink" title="SF-符号标志（sign flag）"></a>SF-符号标志（sign flag）</h5><p>SF&#x3D;1，结果为负</p><p>SF&#x3D;0，结果为正</p><h5 id="CF-进位标志（carry-flag）"><a href="#CF-进位标志（carry-flag）" class="headerlink" title="CF-进位标志（carry flag）"></a>CF-进位标志（carry flag）</h5><p>CF&#x3D;1,有进位</p><p>CF&#x3D;0，无进位</p><h5 id="OF-溢出标志（overflow-flag）"><a href="#OF-溢出标志（overflow-flag）" class="headerlink" title="OF-溢出标志（overflow flag）"></a>OF-溢出标志（overflow flag）</h5><p>OF&#x3D;1,有溢出</p><p>OF&#x3D;0,无溢出</p><h3 id="adc是带进位加法指令"><a href="#adc是带进位加法指令" class="headerlink" title="adc是带进位加法指令"></a>adc是带进位加法指令</h3><p>利用了CF位上是否有进位</p><h3 id="cmp和条件转移指令"><a href="#cmp和条件转移指令" class="headerlink" title="cmp和条件转移指令"></a>cmp和条件转移指令</h3><p>格式：cmp 操作对象1，操作对象2</p><p>功能：计算操作对象1-操作对象2</p><p>应用：通过cmp指令执行后相关标志位的值，可以看出比较的结果、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">cmp ax,bx<br>;ZF=1 (AX)=(BX)<br>;ZF=0 (AX)!=(BX)<br>;CF=1 (AX)&lt;(BX)，产生了借位<br>;CF=0 (AX)&gt;=(BX),不必借位,当且仅当ZF=1时为等于<br></code></pre></td></tr></table></figure><p>条件转移指令中各符号的意思：</p><p>j-jump e-equal n-not b-below a-above l-less g-greater s-sign c-carry p-parity o-overflow z-zero</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;如果（ah）=(bh),则(ah)=(ah)+(ah),否则（ah)=(ah)+(bh)<br>cmp ah,bh<br>je s<br>add ah,bh<br>jmp short ok<br>s:add ah,ah<br>ok:ret<br></code></pre></td></tr></table></figure><h3 id="DF标志及串传送指令"><a href="#DF标志及串传送指令" class="headerlink" title="DF标志及串传送指令"></a>DF标志及串传送指令</h3><p>DF&#x3D;0,每次操作后si,di递增，否则递减。递增和递减的大小取决于传送的单位</p><h5 id="movsb-以字节单位传送"><a href="#movsb-以字节单位传送" class="headerlink" title="movsb:以字节单位传送"></a>movsb:以字节单位传送</h5><h5 id="movsw以字单位传送"><a href="#movsw以字单位传送" class="headerlink" title="movsw以字单位传送"></a>movsw以字单位传送</h5><h5 id="rep指令"><a href="#rep指令" class="headerlink" title="rep指令"></a>rep指令</h5><p>功能：根据cx的值，重复执行后面的指令</p><p>用法:rep movsb&#x3D;s:movsb </p><p>​loop s</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code,ds:data<br>data segment<br>db &#x27;welcome to masm!&#x27;<br>db 16 dup(0)<br>data ends<br>code segment<br>start:<br>mov ax,data<br>mov ds,ax<br>mov es,ax<br>mov si,0;源地址寄存器<br>mov di,16;目标地址寄存器<br>cld；将DF设置为0，std将DF设置为1<br>mov cx,8<br>rep movsw<br><br>mov ax,4c00h<br>int 21h<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="移位指令"><a href="#移位指令" class="headerlink" title="移位指令"></a>移位指令</h3><p>逻辑左移SHL</p><p>逻辑右移SHR</p><p>循环左移ROL</p><p>循环右移ROR</p><p>算数左移SAL</p><p>算术右移SAR</p><p>带进位循环左移RCL</p><p>带进位循环右移RCR</p><p>RO-rotate,C-carry</p><h5 id="移位指令-OPR-CNTOPR代表操作数，CNT表述移动数位"><a href="#移位指令-OPR-CNTOPR代表操作数，CNT表述移动数位" class="headerlink" title="移位指令+OPR+CNTOPR代表操作数，CNT表述移动数位"></a>移位指令+OPR+CNTOPR代表操作数，CNT表述移动数位</h5><p>用法：左移乘以2，右移除以二</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,00000001b;(al)=1<br>shl al,1;(al)=2<br>mov cl,3<br>shl al,cl;(al)=16<br></code></pre></td></tr></table></figure><h3 id="操作显存数据"><a href="#操作显存数据" class="headerlink" title="操作显存数据"></a>操作显存数据</h3><p>屏幕上的数据&#x3D;显存内的数据</p><p>显存空间：128kRAM <strong>其中B8000H-BFFFFH共32k空间是80*25彩色字符模式第0页的显示缓冲区</strong>（80列25行）</p><p>每一行80个字，160个字节</p><p>低位字节放ASCII，高位字节放属性字节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,data<br>mov ds,ax<br>mov ax,0b800h<br>mov es,ax<br>mov si,0<br>mov di,160*12+80-16<br><br>mov cx,16<br>w:mov al,[si]<br>mov es:[di],al<br>inc di<br>mov al,71h;颜色属性<br>mov es:[di],al<br>inc si<br>inc di<br>loop w<br>;直接显示<br></code></pre></td></tr></table></figure><h3 id="描述内存单元的标号"><a href="#描述内存单元的标号" class="headerlink" title="描述内存单元的标号"></a>描述内存单元的标号</h3><p>代码段中的数据也可以用标号</p><p>在code段使用标号但不使用冒号，使用字还是字节看后面，不加冒号的为数据标号，加冒号的为地址标号</p><h5 id="数据标号同时描述内存地址和单元长度"><a href="#数据标号同时描述内存地址和单元长度" class="headerlink" title="数据标号同时描述内存地址和单元长度"></a>数据标号同时描述内存地址和单元长度</h5><h5 id="地址标号只能在代码段使用"><a href="#地址标号只能在代码段使用" class="headerlink" title="地址标号只能在代码段使用"></a>地址标号只能在代码段使用</h5><h6 id="seg的作用是取段地址"><a href="#seg的作用是取段地址" class="headerlink" title="seg的作用是取段地址"></a>seg的作用是取段地址</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br>start:<br>mov al,60<br>call showsin<br>mov ax,4c00h<br>int 21h<br><br>showsin:<br>jmp shortshow<br>;字符串偏移地址表<br>table dw ag0,ag30,ag60,ag90,ag120,ag150,ag180<br>ag0 db &#x27;0&#x27;,0<br>……<br>;预备<br>push bx<br>push es<br>push si<br><br>mov bx,0b800h<br>mov es,bx<br>;取相应字符串的偏移地址放在bx内<br>mov ah,0<br>mov bl,30<br>div bl;相当于60/30<br>mov bl,al;结果在al中<br>mov bh,0<br>add bx,bx;每一个都是dw类型<br>mov bx,table[bx]<br>;显示对应字符串<br>mov si,160*12+40*2<br>shows:<br>mov ah,cs:[bx]<br>cmp ah,0<br>je showret<br>mov es:[si],ah;显示<br>inc bx<br>add si,2<br>jmp shows<br>;善后<br>pop di<br>pop es<br>pop bx<br>ret<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="直接定址表"><a href="#直接定址表" class="headerlink" title="直接定址表"></a>直接定址表</h3><p>问题：以十六进制的形式在屏幕中间娴熟给定的byte型数据</p><p>分析：把一个byte的高四位和第四位分开，显示对应的数码字符</p><p>利用表，在两个数据集合之间建立一种映射关系，用查表的方法根据给出的数据得到其在另一集合中的数据</p><p>ah放功能号，al放属性号</p><h3 id="中断及其处理"><a href="#中断及其处理" class="headerlink" title="中断及其处理"></a>中断及其处理</h3><p>内中断：CPU内部发生的事件引起的中断</p><p>外中断：外部设备发生的事情引起的中断</p><p>8086的内中断：</p><p>​除法错误：div指令产生除法溢出；中断码0</p><p>​单步执行：中断类型码1</p><p>​执行into指令：中断类型码4</p><p>​执行int指令：执行int n指令，立即数为中断类型码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;lea取得相应标号地址，lea a,b 把b的地址放入a<br>;13,10回车换行<br>;&#x27;$&#x27;字符串<br>;int 21h处理dos信息<br>;mov ah,9显示字符串<br>;ds:dx显示的是从这里取了显示<br></code></pre></td></tr></table></figure><h5 id="中断处理程序"><a href="#中断处理程序" class="headerlink" title="中断处理程序"></a>中断处理程序</h5><p>CPU接收到中断信息执行中断处理程序</p><p>中断信息和其处理程序的入口地址之间有某种联系</p><p>中断向量表可以由中断类型码查表得到中断处理程序</p><p>高位放CS，低位放IP</p><h5 id="中断过程"><a href="#中断过程" class="headerlink" title="中断过程"></a>中断过程</h5><p>中断过程由CPU的硬件自动完成</p><p>IP&#x3D;4N,CS&#x3D;4N+2</p><h5 id="设置中断向量表"><a href="#设置中断向量表" class="headerlink" title="设置中断向量表"></a>设置中断向量表</h5><p>把程序的入口地址，写道中断向量表对应的n号表项中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;求2*3456^2,写中断7ch的中断例程完成任务<br>;iret主要用于中断子程序中<br>assume cs:code <br>code segment<br>start:<br>mov ax,cs<br>mov ds,ax<br>mov si,offset sqr;源地址<br>mov ax,0<br>mov es,ax<br>mov di,200h;目的地址<br>mov cx,offset sqrend-offset sqr;循环次数<br>cld <br>rep movsb<br><br>mov ax,0<br>mov es,ax<br>mov word ptr es:[7ch*4],200h;ip<br>mov word ptr es:[7ch*4+2],0;cs<br>mov ax,4c00h<br>int 21h<br><br>sqr:<br>mul ax<br>iret<br>sqrend:nop<br>code ends<br>end start<br><br>;调用中断例程<br>code segment<br>start:<br>mov ax,3456<br>int 7ch<br>add ax,ax<br>mov ax,4c00h<br>int 21h<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="单步中断"><a href="#单步中断" class="headerlink" title="单步中断"></a>单步中断</h3><p>TF（陷阱标志）标志为1，让CPU处在单步中断方式下</p><p>IF（中断标志）标志为1，允许CPU相应可屏蔽中断请求，IF&#x3D;0关闭中断</p><p>中断过程：</p><p>​取得中断类型码N</p><p>​标志寄存器入栈，TF,IF置为0</p><p>​CS,IP入栈</p><p>​IP&#x3D;4N CS&#x3D;4N+2</p><h5 id="中断不响应的情况"><a href="#中断不响应的情况" class="headerlink" title="中断不响应的情况"></a>中断不响应的情况</h5><p>ss:sp联合指向栈顶，对他们的涉资连续完成，不进行单步执行</p><h3 id="由int指令引起的中断"><a href="#由int指令引起的中断" class="headerlink" title="由int指令引起的中断"></a>由int指令引起的中断</h3><p>中断过程与上方一致</p><h3 id="BIOS基本输入输出系统"><a href="#BIOS基本输入输出系统" class="headerlink" title="BIOS基本输入输出系统"></a>BIOS基本输入输出系统</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;bios中断调用示例<br>;在屏幕的五行十二列显示三个红底高亮闪烁绿色的&#x27;a&#x27;;<br>assume cs:code<br>code segment<br>mov ah,2;置光标功能<br>mov bh,0;第0页<br>mov dh,5;第五行<br>mov dl,12;十二列<br>int 10h;bios10号中断例程<br><br>mov ah,9;显示字符功能<br>mov al,&#x27;a&#x27;;<br>mov bl,11001010b;颜色属性<br>mov bh,0;第0页<br>mov cx,3;三遍<br>int 10h<br><br>mov ax,4c00h<br>int 21h<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="端口的读写"><a href="#端口的读写" class="headerlink" title="端口的读写"></a>端口的读写</h3><p>in从端口读取数据和out输出数据</p><p>设备控制寄存器61h</p><p>端口对应除CPU以外的外部设备</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022/05/15/消息轰炸简洁代码/</title>
    <link href="/2022/05/15/%E6%B6%88%E6%81%AF%E8%BD%B0%E7%82%B8%E7%AE%80%E6%B4%81%E4%BB%A3%E7%A0%81/"/>
    <url>/2022/05/15/%E6%B6%88%E6%81%AF%E8%BD%B0%E7%82%B8%E7%AE%80%E6%B4%81%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tchar.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入你想要轰炸的次数：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; i;<br>LPCWSTR str1 = _T(<span class="hljs-string">&quot;XXX&quot;</span>);<span class="hljs-comment">//QQ好友备注名</span><br>HWND H = <span class="hljs-built_in">FindWindow</span>(<span class="hljs-number">0</span>, str1);<br><span class="hljs-keyword">while</span> (i-- &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">SendMessage</span>(H, WM_PASTE, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">SendMessage</span>(H, WM_KEYDOWN, VK_RETURN, <span class="hljs-number">0</span>);<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//使用前先要将想发的信息复制在剪贴板，再run</span><br></code></pre></td></tr></table></figure><p><img src="/2022/05/15/%E6%B6%88%E6%81%AF%E8%BD%B0%E7%82%B8%E7%AE%80%E6%B4%81%E4%BB%A3%E7%A0%81/1.jpg"></p><p>挺好玩的哈哈哈哈哈，要找一个不会删你的铁子。</p>]]></content>
    
    
    <categories>
      
      <category>自己撸的代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022/05/15/NTL实现RSA/</title>
    <link href="/2022/05/15/NTL%E5%AE%9E%E7%8E%B0RSA/"/>
    <url>/2022/05/15/NTL%E5%AE%9E%E7%8E%B0RSA/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;NTL/ZZ.h&gt;</span></span><br>NTL_CLIENT<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BITS 256      <span class="hljs-comment">//要求概率素数 p , q 的比特位数达 BITS bits</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">KeyGeneration</span><span class="hljs-params">(ZZ&amp;e, ZZ&amp;d, ZZ&amp;euler)</span> <span class="hljs-comment">//生成e,d</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">RandomPrime</span>(e, <span class="hljs-number">64</span>, <span class="hljs-number">10</span>);<br>d = <span class="hljs-built_in">InvMod</span>(e, euler);<br>&#125;<br><br><span class="hljs-function">ZZ <span class="hljs-title">Encryption</span><span class="hljs-params">(ZZ&amp;e, ZZ&amp;n, ZZ&amp;M)</span> <span class="hljs-comment">//加密函数</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">PowerMod</span>(M, e, n);<br>&#125;<br><br><span class="hljs-function">ZZ <span class="hljs-title">Decryption</span><span class="hljs-params">(ZZ&amp;d, ZZ&amp;n, ZZ&amp;C)</span> <span class="hljs-comment">//解密函数</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">PowerMod</span>(C, d, n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ZZ  p, q;   <span class="hljs-comment">//两个 BITS 比特的随机概率素数 p , q</span><br>ZZ  n, e, d, euler;   <span class="hljs-comment">// n=p*q, euler=(p-1)*(q-1), e---加密密钥,  d---解密密钥</span><br><span class="hljs-type">int</span> bits = BITS;<br>ZZ M, C;<br>cout &lt;&lt; <span class="hljs-string">&quot;请输入明文：&quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; M;<br><span class="hljs-built_in">RandomPrime</span>(p, bits, <span class="hljs-number">10</span>);    <br><span class="hljs-built_in">RandomPrime</span>(q, bits, <span class="hljs-number">10</span>);<br>n = p * q;   <br>euler = (p - <span class="hljs-number">1</span>)*(q - <span class="hljs-number">1</span>);    <span class="hljs-comment">//计算 n=p*q 及 欧拉函数值 euler(n)=(p-1)*(q-1)</span><br><span class="hljs-built_in">KeyGeneration</span>(d, e, euler);    <span class="hljs-comment">//生成密钥: d, e , d*e=1 Mod euler(n)</span><br><span class="hljs-built_in">Encryption</span>(e, n, M); <span class="hljs-comment">//加密: C=M^e(Mod n)</span><br>C= <span class="hljs-built_in">Encryption</span>(e, n, M);<br>cout &lt;&lt; <span class="hljs-string">&quot;密文是：&quot;</span> &lt;&lt; C&lt;&lt;endl;<br><span class="hljs-built_in">Decryption</span>(d, n, C); <span class="hljs-comment">//解密: M=C^d(Mod n)</span><br>ZZ M1;<span class="hljs-comment">//用于验证M与最后通过C解密的明文是否相等</span><br>M1= <span class="hljs-built_in">Decryption</span>(d, n, C);<br><span class="hljs-keyword">if</span> (M == M1)<br>cout &lt;&lt; <span class="hljs-string">&quot;RSA成功运行&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; endl; <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>琢磨了好久的NTL官方文档之后，发现写起来也还挺顺手的，主要是在invmod()那里报错，一直提示inverse not defined，此时的e是GCD(e,euler)&#x3D;1求的，最后直接将e换成了一个64bit的随机素数，解决了报错的问题。需要打印每一个e，d只需要加入cout即可。</p>]]></content>
    
    
    <categories>
      
      <category>自己撸的代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>RSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022/04/21/戴建业散文/</title>
    <link href="/2022/04/21/%E6%88%B4%E5%BB%BA%E4%B8%9A%E6%95%A3%E6%96%87/"/>
    <url>/2022/04/21/%E6%88%B4%E5%BB%BA%E4%B8%9A%E6%95%A3%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h4 id="1-每课结束后我都会在脑中复述这一课的内容，归纳它的重点、要点和难点，进新课之前要复习一遍前两次的课程。"><a href="#1-每课结束后我都会在脑中复述这一课的内容，归纳它的重点、要点和难点，进新课之前要复习一遍前两次的课程。" class="headerlink" title="1.每课结束后我都会在脑中复述这一课的内容，归纳它的重点、要点和难点，进新课之前要复习一遍前两次的课程。"></a>1.每课结束后我都会在脑中复述这一课的内容，归纳它的重点、要点和难点，进新课之前要复习一遍前两次的课程。</h4><p>我要是每次上完课都这样干，那么期末肯定不用抱佛脚啦。但是不得不承认，作者的学习成果有一大部分必定得益于此。</p><h4 id="2-我白天背诵英语课文，一页页地背诵词典上的单词，就寝后睡在床上又默背一遍，第二天早晨背新课前先复习旧课。这样日复一日地苦干了一年，我便以优异的成绩进入了英语快班。"><a href="#2-我白天背诵英语课文，一页页地背诵词典上的单词，就寝后睡在床上又默背一遍，第二天早晨背新课前先复习旧课。这样日复一日地苦干了一年，我便以优异的成绩进入了英语快班。" class="headerlink" title="2.我白天背诵英语课文，一页页地背诵词典上的单词，就寝后睡在床上又默背一遍，第二天早晨背新课前先复习旧课。这样日复一日地苦干了一年，我便以优异的成绩进入了英语快班。"></a>2.我白天背诵英语课文，一页页地背诵词典上的单词，就寝后睡在床上又默背一遍，第二天早晨背新课前先复习旧课。这样日复一日地苦干了一年，我便以优异的成绩进入了英语快班。</h4><p>也许曾经高中的时候达到过作者的十分之一，一直比较热爱英语，至少没有讨厌过。</p><p>不管哪一门学科，我要是能抱着作者这样的决心，那特么一定so easy!</p><h4 id="3-“铁因冷却而变硬，人被冷落才清醒。越是不被人关注，越是容易深入思考，被社会冷落的人，也许是最有深度的人”。"><a href="#3-“铁因冷却而变硬，人被冷落才清醒。越是不被人关注，越是容易深入思考，被社会冷落的人，也许是最有深度的人”。" class="headerlink" title="3.“铁因冷却而变硬，人被冷落才清醒。越是不被人关注，越是容易深入思考，被社会冷落的人，也许是最有深度的人”。"></a>3.“铁因冷却而变硬，人被冷落才清醒。越是不被人关注，越是容易深入思考，被社会冷落的人，也许是最有深度的人”。</h4><p>太真实啦，有时候网易云的时候深有体会。</p><h4 id="4-孜孜矻矻（ku第一声）：勤勉不屑的样子"><a href="#4-孜孜矻矻（ku第一声）：勤勉不屑的样子" class="headerlink" title="4.孜孜矻矻（ku第一声）：勤勉不屑的样子"></a>4.孜孜矻矻（ku第一声）：勤勉不屑的样子</h4><p>认识了一个比较生僻但不完全生僻的字嘿嘿嘿。</p><h4 id="5-辞能达意是考场作文的基本要求，通过晦涩的表达营造出一种阅读壁垒并不可取。"><a href="#5-辞能达意是考场作文的基本要求，通过晦涩的表达营造出一种阅读壁垒并不可取。" class="headerlink" title="5.辞能达意是考场作文的基本要求，通过晦涩的表达营造出一种阅读壁垒并不可取。"></a>5.辞能达意是考场作文的基本要求，通过晦涩的表达营造出一种阅读壁垒并不可取。</h4><p>想想以前自己写作文也是辞藻堆砌，感觉堆得越华丽越好，引经据典也不能少。反而现在到了不用写作文的时候才发现随心所欲的写东西写出来的才更具有表现力，才可以写有所写。</p><h4 id="6-语言与思维具有深刻的内在联系，任何人的思维都是通过语言来进行，也是通过语言来呈现：你是怎样说，你便怎样想。一个人的语言要是缠来绕去，该人的思维肯定是一团糨糊。"><a href="#6-语言与思维具有深刻的内在联系，任何人的思维都是通过语言来进行，也是通过语言来呈现：你是怎样说，你便怎样想。一个人的语言要是缠来绕去，该人的思维肯定是一团糨糊。" class="headerlink" title="6.语言与思维具有深刻的内在联系，任何人的思维都是通过语言来进行，也是通过语言来呈现：你是怎样说，你便怎样想。一个人的语言要是缠来绕去，该人的思维肯定是一团糨糊。"></a>6.语言与思维具有深刻的内在联系，任何人的思维都是通过语言来进行，也是通过语言来呈现：你是怎样说，你便怎样想。一个人的语言要是缠来绕去，该人的思维肯定是一团糨糊。</h4><p>一个人的语言要是缠来绕去也许是有难言之隐，不能直接表达哇，希望另一方可以察觉，缓解本就局促的尴尬现场，有些巧舌如簧的人，思维和脑袋装的东西或许还不如一团糨糊。从另一方面来说，一个说话很有涵养的人思维却也不会差到哪里去。</p><h4 id="7-投机取巧只能获利于一时，花拳绣腿永远不可能御敌。该生将来一定会脚踏实地阅读写作，将会用富于个性的优美语言，准确地论述自己的真知灼见，生动地表现自己的真情实感，让我们流泪，让我们受益。"><a href="#7-投机取巧只能获利于一时，花拳绣腿永远不可能御敌。该生将来一定会脚踏实地阅读写作，将会用富于个性的优美语言，准确地论述自己的真知灼见，生动地表现自己的真情实感，让我们流泪，让我们受益。" class="headerlink" title="7.投机取巧只能获利于一时，花拳绣腿永远不可能御敌。该生将来一定会脚踏实地阅读写作，将会用富于个性的优美语言，准确地论述自己的真知灼见，生动地表现自己的真情实感，让我们流泪，让我们受益。"></a>7.投机取巧只能获利于一时，花拳绣腿永远不可能御敌。该生将来一定会脚踏实地阅读写作，将会用富于个性的优美语言，准确地论述自己的真知灼见，生动地表现自己的真情实感，让我们流泪，让我们受益。</h4><p>虽然我看了很多书，很多书看了之后并做不到让我一直念念不忘，甚至我都不会记得内容。但是我看过的每一本书都起到了作用，或多或少的，也许是偶然的和某个人谈起一个话题，说到都看过的一本书，这样似乎还是很有作用的；亦或是自己的语言表述能不知不觉中有所提高，至少在高中这个知识存储顶峰过去后不至于退化的一无所有，有出有进。</p><h4 id="8-人有丑俊，书有浅深。就像人有种种色色一样，书也分不同的性质和层次。"><a href="#8-人有丑俊，书有浅深。就像人有种种色色一样，书也分不同的性质和层次。" class="headerlink" title="8.人有丑俊，书有浅深。就像人有种种色色一样，书也分不同的性质和层次。"></a>8.人有丑俊，书有浅深。就像人有种种色色一样，书也分不同的性质和层次。</h4><p>人的丑俊似乎不能跟书的浅深一概而论，人的深度和书的深度反而有很大的可比性，人也有形形色色的性格和水准。</p><h4 id="9-原创性著作可称为“作”，它们横空出世而自铸伟词，属于前无古人且后启来者的经典。或阐述他人之思，或综贯百家之绪，或引申前人之学，虽然没有原创性，但能自成一家言，这一类书籍称为“述”；或记录“思想火花”，或更正当时邪说，或分析一时变故，按王充的说法，属于“杂说”一类的东西统称之为“论”。"><a href="#9-原创性著作可称为“作”，它们横空出世而自铸伟词，属于前无古人且后启来者的经典。或阐述他人之思，或综贯百家之绪，或引申前人之学，虽然没有原创性，但能自成一家言，这一类书籍称为“述”；或记录“思想火花”，或更正当时邪说，或分析一时变故，按王充的说法，属于“杂说”一类的东西统称之为“论”。" class="headerlink" title="9.原创性著作可称为“作”，它们横空出世而自铸伟词，属于前无古人且后启来者的经典。或阐述他人之思，或综贯百家之绪，或引申前人之学，虽然没有原创性，但能自成一家言，这一类书籍称为“述”；或记录“思想火花”，或更正当时邪说，或分析一时变故，按王充的说法，属于“杂说”一类的东西统称之为“论”。"></a>9.原创性著作可称为“作”，它们横空出世而自铸伟词，属于前无古人且后启来者的经典。或阐述他人之思，或综贯百家之绪，或引申前人之学，虽然没有原创性，但能自成一家言，这一类书籍称为“述”；或记录“思想火花”，或更正当时邪说，或分析一时变故，按王充的说法，属于“杂说”一类的东西统称之为“论”。</h4><p>对于“作”，“述”，“论”理解的最深刻的一次。</p><h4 id="10-学无所成的原因是没有定力。人与人拉开差距的关键，大多不是智力的高下，而是毅力与恒心的大小。"><a href="#10-学无所成的原因是没有定力。人与人拉开差距的关键，大多不是智力的高下，而是毅力与恒心的大小。" class="headerlink" title="10.学无所成的原因是没有定力。人与人拉开差距的关键，大多不是智力的高下，而是毅力与恒心的大小。"></a>10.学无所成的原因是没有定力。人与人拉开差距的关键，大多不是智力的高下，而是毅力与恒心的大小。</h4><p>反思自己，多少差些许定力，只想学习自己想要学习的，对于简单的理论性知识或者太过于复杂牵连到多个分支的知识有点力不从心，总是只能整一个开头，如果能定住就能好很多啦，找到了问题，看看啥时候有个合适的契机改一改。</p><h4 id="11-读书人大多爱自吹自擂，很少在人前坦承自己如何刻苦，而是经常对别人炫耀自己如何聪明，刻苦是个人的努力，聪明是上帝的天赋，刻苦可以学习，而天赋只能钦佩。"><a href="#11-读书人大多爱自吹自擂，很少在人前坦承自己如何刻苦，而是经常对别人炫耀自己如何聪明，刻苦是个人的努力，聪明是上帝的天赋，刻苦可以学习，而天赋只能钦佩。" class="headerlink" title="11.读书人大多爱自吹自擂，很少在人前坦承自己如何刻苦，而是经常对别人炫耀自己如何聪明，刻苦是个人的努力，聪明是上帝的天赋，刻苦可以学习，而天赋只能钦佩。"></a>11.读书人大多爱自吹自擂，很少在人前坦承自己如何刻苦，而是经常对别人炫耀自己如何聪明，刻苦是个人的努力，聪明是上帝的天赋，刻苦可以学习，而天赋只能钦佩。</h4><p>只能说太真实啦！！！！</p><h4 id="12-对高考要有平常心态。高分固然可喜，低分也不用担忧，机会永远向奋斗者敞开大门。"><a href="#12-对高考要有平常心态。高分固然可喜，低分也不用担忧，机会永远向奋斗者敞开大门。" class="headerlink" title="12.对高考要有平常心态。高分固然可喜，低分也不用担忧，机会永远向奋斗者敞开大门。"></a>12.对高考要有平常心态。高分固然可喜，低分也不用担忧，机会永远向奋斗者敞开大门。</h4><p>我信你个鬼，说实话这种事情放在任何一个高三生身上，完全不可能做到生死看淡。对于已经经历过高考的我自己，那场高考依旧是我过不去的坎。机会确实向奋斗者敞开大门，但它又何尝不向任何一个人敞开呢，又没有强调什么机会，只能说这一句很鸡汤，看似都正确，却属于不可达。</p><h4 id="13-我们每个人能否成才，主要取决于韧性的强弱，而不是智力的高低。"><a href="#13-我们每个人能否成才，主要取决于韧性的强弱，而不是智力的高低。" class="headerlink" title="13.我们每个人能否成才，主要取决于韧性的强弱，而不是智力的高低。"></a>13.我们每个人能否成才，主要取决于韧性的强弱，而不是智力的高低。</h4><p>韧性，愿我能一直拥有。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022/04/20/使用hexo和gitee搭建博客的一些坑/</title>
    <link href="/2022/04/20/%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <url>/2022/04/20/%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h3 id="1-hexo-init-生成相应文件夹"><a href="#1-hexo-init-生成相应文件夹" class="headerlink" title="1.hexo init 生成相应文件夹"></a>1.<code>hexo init</code> 生成相应文件夹</h3><p>找一个空的文件夹进行git bash。否则会报错</p><h3 id="2-每次hexo-s-d前先hexo-clean-cl"><a href="#2-每次hexo-s-d前先hexo-clean-cl" class="headerlink" title="2.每次hexo s/d前先hexo clean(cl)"></a>2.每次<code>hexo s/d</code>前先<code>hexo clean(cl)</code></h3><p>清除缓存</p><h3 id="3-注册gitee后开启pages服务记得挑个工作日"><a href="#3-注册gitee后开启pages服务记得挑个工作日" class="headerlink" title="3.注册gitee后开启pages服务记得挑个工作日"></a>3.注册gitee后开启pages服务记得挑个工作日</h3><p>gitee申请该服务需要进行实名认证，实名认证只会在工作日进行审核</p><h3 id="4-hexo-d后出现git-done打开网页出现404页"><a href="#4-hexo-d后出现git-done打开网页出现404页" class="headerlink" title="4.hexo d后出现git done打开网页出现404页"></a>4.<code>hexo d</code>后出现git done打开网页出现404页</h3><p>git了之后需要在pages服务中点击更新重新部署网站才能查看，修改配置后网页未同步同理</p><p><img src="/2022/04/20/%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/gitee1.png"></p><h3 id="5-出现502，504页"><a href="#5-出现502，504页" class="headerlink" title="5.出现502，504页"></a>5.出现502，504页</h3><p>个人博客使用的还是gitee服务器，毕竟人家服务器免费，多刷新几次就出来了</p><h3 id="6-leancloud用于统计真的太香了"><a href="#6-leancloud用于统计真的太香了" class="headerlink" title="6.leancloud用于统计真的太香了"></a>6.leancloud用于统计真的太香了</h3><p><img src="/2022/04/20/%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/leancloud.png"></p><h3 id="7-config-yml文件问题"><a href="#7-config-yml文件问题" class="headerlink" title="7._config.yml文件问题"></a>7._config.yml文件问题</h3><p>和.github在同一目录的config文件与在themes里面的config文件要注意区分，主题配置网上都有教程，但是blog的网页title在前一个config文件中更改，图标在后一个主题文件中修改。</p><p>我为了更改掉Hexo的title整了好久才发现原来在总的配置文件下更改</p><h3 id="8-与fluid主题相关"><a href="#8-与fluid主题相关" class="headerlink" title="8.与fluid主题相关"></a>8.与fluid主题相关</h3><ul><li><p>更改配置文件中的图片要将name以及后缀名完全对应，否则部署后，blog显示为默认图片或者黑色</p></li><li><p>关于页（about），<code>hexo new page about</code>很easy，但是加layout属性要配置在front-matter里面（hexo默认已经建好）而不是重新新建</p></li><li><p>本地预览，<code>hexo s</code>后，在配置文件做出修改，直接<code>ctrl+s</code>一波，刷新网页即可预览</p></li><li><p>官方文档给的比CSDN给的多得多，直接搜索hexo fluid就有能找到</p><p><img src="/2022/04/20/%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/fluid.jpg"></p></li></ul><p>总体来说搭建这个博客还是挺快乐的，欢迎访问<a href="Living0908.gitee.io">我的博客</a></p>]]></content>
    
    
    <categories>
      
      <category>经验总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
